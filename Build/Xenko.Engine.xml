<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xenko.Engine</name>
    </assembly>
    <members>
        <member name="T:Xenko.Animations.AnimationBlender">
            <summary>
            Performs animation blending.
            For now, all AnimationClip must target the same skeleton.
            </summary>
        </member>
        <member name="M:Xenko.Animations.AnimationBlender.Compute(Xenko.Core.Collections.FastList{Xenko.Animations.AnimationOperation},Xenko.Animations.AnimationClipResult@)">
            <summary>
            Computes the specified animation operations.
            </summary>
            <param name="animationOperations">The animation operations to perform.</param>
            <param name="result">The optional result (if not null, it expects the final stack to end up with this element).</param>
        </member>
        <member name="T:Xenko.Animations.AnimationBlendOperation">
            <summary>
            Describes the type of animation blend operation.
            </summary>
        </member>
        <member name="F:Xenko.Animations.AnimationBlendOperation.LinearBlend">
            <summary>
            Linear blend operation.
            </summary>
        </member>
        <member name="F:Xenko.Animations.AnimationBlendOperation.Add">
            <summary>
            Add operation.
            </summary>
        </member>
        <member name="T:Xenko.Animations.CoreAnimationOperation">
            <summary>
            Core animation operations support all operations exposed for blending as well as several required for the animation building itself
            </summary>
        </member>
        <member name="T:Xenko.Animations.AnimationChannel">
            <summary>
            List of float key frame data applying to a specific property in a node.
            </summary>
        </member>
        <member name="M:Xenko.Animations.AnimationChannel.EvaluateError(System.Func{Xenko.Animations.CompressedTimeSpan,System.Single},Xenko.Animations.AnimationChannel.Evaluator,Xenko.Animations.CompressedTimeSpan,Xenko.Animations.KeyFrameData{System.Single},Xenko.Animations.KeyFrameData{System.Single})">
            <summary>
            Evaluates the error within specified segment.
            </summary>
            <param name="originalCurve">The original curve.</param>
            <param name="evaluator">The evaluator.</param>
            <param name="stepSize">Size of the step.</param>
            <param name="keyFrame">The key frame.</param>
            <param name="nextKeyFrame">The next key frame.</param>
            <returns></returns>
        </member>
        <member name="P:Xenko.Animations.AnimationChannel.TargetObject">
            <summary>
            Gets or sets the target object name.
            </summary>
            <value>
            The target object name.
            </value>
        </member>
        <member name="P:Xenko.Animations.AnimationChannel.TargetProperty">
            <summary>
            Gets or sets the target property name.
            </summary>
            <value>
            The target property name.
            </value>
        </member>
        <member name="T:Xenko.Animations.AnimationClip">
            <summary>
            An aggregation of <see cref="T:Xenko.Animations.AnimationCurve"/> with their channel names.
            </summary>
        </member>
        <member name="P:Xenko.Animations.AnimationClip.Duration">
            <summary>
            Gets or sets the duration of this clip.
            </summary>
            <value>
            The duration of this clip.
            </value>
        </member>
        <member name="P:Xenko.Animations.AnimationClip.RepeatMode">
            <summary>
            Gets or sets the repeat mode of the <see cref="T:Xenko.Animations.AnimationClip"/>.
            </summary>
        </member>
        <member name="F:Xenko.Animations.AnimationClip.Channels">
            <summary>
            Gets the channels of this clip.
            </summary>
            <value>
            The channels of this clip.
            </value>
        </member>
        <member name="F:Xenko.Animations.AnimationClip.ShouldRescanChannels">
            <summary>
            Set this flag to true when the channel information of the clip have changed and need to be rescan by engine.
            </summary>
        </member>
        <member name="M:Xenko.Animations.AnimationClip.AddCurve(System.String,Xenko.Animations.AnimationCurve,System.Boolean)">
            <summary>
            Adds a named curve.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="curve">The curve.</param>
        </member>
        <member name="M:Xenko.Animations.AnimationClip.Optimize">
            <summary>
            Optimizes data from multiple curves to a single linear data stream.
            </summary>
        </member>
        <member name="T:Xenko.Animations.AnimationClipEvaluator">
            <summary>
            Evaluates <see cref="T:Xenko.Animations.AnimationClip"/> to a <see cref="T:Xenko.Animations.AnimationClipResult"/> at a given time.
            </summary>
        </member>
        <member name="F:Xenko.Animations.AnimationClipResult.DataSize">
            <summary>
            Total size of all structures to be stored in structures.
            </summary>
        </member>
        <member name="P:Xenko.Animations.AnimationClipResult.Channels">
            <summary>
            Gets or sets the animation channel descriptions.
            </summary>
            <value>
            The animation channel descriptions.
            </value>
        </member>
        <member name="F:Xenko.Animations.AnimationClipResult.Data">
            <summary>
            Stores all animation channel blittable struct at a given time.
            </summary>
        </member>
        <member name="F:Xenko.Animations.AnimationClipResult.Objects">
            <summary>
            Stores all animation channel objects and non-blittable struct at a given time.
            </summary>
        </member>
        <member name="T:Xenko.Animations.AnimationCurve">
            <summary>
            Untyped base class for animation curves.
            </summary>
        </member>
        <member name="P:Xenko.Animations.AnimationCurve.InterpolationType">
            <summary>
            Gets or sets the interpolation type.
            </summary>
            <value>
            The interpolation type.
            </value>
        </member>
        <member name="P:Xenko.Animations.AnimationCurve.ElementType">
            <summary>
            Gets the type of keyframe values.
            </summary>
            <value>
            The type of keyframe values.
            </value>
        </member>
        <member name="P:Xenko.Animations.AnimationCurve.ElementSize">
            <summary>
            Gets the size of keyframe values.
            </summary>
            <value>
            The size of keyframe values.
            </value>
        </member>
        <member name="M:Xenko.Animations.AnimationCurve.AddValue(Xenko.Animations.CompressedTimeSpan,System.IntPtr)">
            <summary>
            Writes a new value at the end of the curve (used for building curves).
            It should be done in increasing order as it will simply add a new key at the end of <see cref="P:Xenko.Animations.AnimationCurve`1.KeyFrames"/>.
            </summary>
            <param name="newTime">The new time.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Xenko.Animations.AnimationCurve.CreateOptimizedData(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Xenko.Animations.AnimationCurve}})">
            <summary>
            Meant for internal use, to call AnimationData{T}.FromAnimationChannels() without knowing the generic type.
            </summary>
            <param name="animationChannelsByName"></param>
        </member>
        <member name="M:Xenko.Animations.AnimationCurve.ShiftKeys(Xenko.Animations.CompressedTimeSpan)">
            <summary>
            Shifts all animation keys by the specified time, adding it to all <see cref="!:KeyFrameData.Time"/>
            </summary>
            <param name="shiftTimeSpan">The time span by which the keys should be shifted</param>
        </member>
        <member name="T:Xenko.Animations.AnimationCurve`1">
            <summary>
            Typed class for animation curves.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Xenko.Animations.AnimationCurve`1.KeyFrames">
            <summary>
            Gets or sets the key frames.
            </summary>
            <value>
            The key frames.
            </value>
        </member>
        <member name="P:Xenko.Animations.AnimationCurve`1.ElementType">
            <inheritdoc/>
        </member>
        <member name="P:Xenko.Animations.AnimationCurve`1.ElementSize">
            <inheritdoc/>
        </member>
        <member name="P:Xenko.Animations.AnimationCurve`1.Keys">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.AnimationCurve`1.FindKeyIndex(Xenko.Animations.CompressedTimeSpan)">
            <summary>
            Find key index.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Xenko.Animations.AnimationCurve`1.AddValue(Xenko.Animations.CompressedTimeSpan,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.AnimationCurve`1.CreateOptimizedData(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Xenko.Animations.AnimationCurve}})">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.AnimationCurve`1.ShiftKeys(Xenko.Animations.CompressedTimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Animations.AnimationCurveInterpolationType">
            <summary>
            Describes how a curve should be interpolated.
            </summary>
        </member>
        <member name="F:Xenko.Animations.AnimationCurveInterpolationType.Constant">
            <summary>
            Interpolates by using constant value between keyframes.
            </summary>
        </member>
        <member name="F:Xenko.Animations.AnimationCurveInterpolationType.Linear">
            <summary>
            Interpolates linearly between keyframes.
            </summary>
        </member>
        <member name="F:Xenko.Animations.AnimationCurveInterpolationType.Cubic">
            <summary>
            Interpolates with implicit derivatives using points before and after.
            More information at http://en.wikipedia.org/wiki/Cubic_Hermite_spline#Interpolation_on_the_unit_interval_without_exact_derivatives.
            </summary>
        </member>
        <member name="F:Xenko.Animations.AnimationKeyTangentType.Linear">
            <summary>
            Linear - the value is linearly calculated as V1 * (1 - t) + V2 * t
            </summary>
        </member>
        <member name="M:Xenko.Animations.AnimationKeyValuePairArraySerializer`1.Initialize(Xenko.Core.Serialization.SerializerSelector)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Animations.AnimationOperation">
            <summary>
            A single animation operation (push or blend).
            </summary>
        </member>
        <member name="M:Xenko.Animations.AnimationOperation.NewPush(Xenko.Animations.AnimationClipEvaluator)">
            <summary>
            Creates a new animation push operation.
            </summary>
            <param name="evaluator">The evaluator.</param>
            <returns></returns>
        </member>
        <member name="M:Xenko.Animations.AnimationOperation.NewPush(Xenko.Animations.AnimationClipEvaluator,System.TimeSpan)">
            <summary>
            Creates a new animation push operation.
            </summary>
            <param name="evaluator">The evaluator.</param>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="M:Xenko.Animations.AnimationOperation.NewPop(Xenko.Animations.AnimationClipEvaluator,System.TimeSpan)">
            <summary>
            Creates a new animation pop operation.
            </summary>
            <param name="evaluator">The evaluator.</param>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="M:Xenko.Animations.AnimationOperation.NewBlend(Xenko.Animations.CoreAnimationOperation,System.Single)">
            <summary>
            Creates a new animation blend operation.
            </summary>
            <param name="operation">The blend operation.</param>
            <param name="blendFactor">The blend factor.</param>
            <returns></returns>
        </member>
        <member name="T:Xenko.Animations.AnimationRepeatMode">
            <summary>
            Enumeration describing how an animation should be repeated.
            </summary>
        </member>
        <member name="F:Xenko.Animations.AnimationRepeatMode.PlayOnce">
            <summary>
            The animation plays once, and then stops.
            </summary>
            <userdoc>The animation plays once, and then stops.</userdoc>
        </member>
        <member name="F:Xenko.Animations.AnimationRepeatMode.LoopInfinite">
            <summary>
            The animation loop for always.
            </summary>
            <userdoc>The animation loop for always.</userdoc>
        </member>
        <member name="F:Xenko.Animations.AnimationRepeatMode.PlayOnceHold">
            <summary>
            The animation plays once, and then holds, being kept in the list.
            </summary>
            <userdoc>The animation plays once, and then holds, being kept in the list.</userdoc>
        </member>
        <member name="T:Xenko.Animations.AnimationUpdater">
            <summary>
            Applies animation from a <see cref="T:Xenko.Animations.AnimationClip"/> to a <see cref="T:Xenko.Rendering.SkeletonUpdater"/>.
            </summary>
        </member>
        <member name="T:Xenko.Animations.CompressedTimeSpanSerializer">
            <summary>
            Data serializer for TimeSpan.
            </summary>
        </member>
        <member name="T:Xenko.Animations.ComputeAnimationCurve`1">
            <summary>
            A node which describes a binary operation between two compute curves
            </summary>
            <typeparam name="T">Sampled data's type</typeparam>
        </member>
        <member name="M:Xenko.Animations.ComputeAnimationCurve`1.UpdateChanges">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeAnimationCurve`1.Compare(Xenko.Animations.AnimationKeyFrame{`0},Xenko.Animations.AnimationKeyFrame{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeAnimationCurve`1.SampleRaw(System.Single)">
            <summary>
            Unoptimized sampler which searches all the keyframes in order. Intended to be used for baking purposes only
            </summary>
            <param name="t">Location t to sample at, between 0 and 1</param>
            <returns>Sampled and interpolated data value</returns>
        </member>
        <member name="M:Xenko.Animations.ComputeAnimationCurve`1.Evaluate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="F:Xenko.Animations.BinaryCurveOperator.Add">
            <summary>
            Add the sampled value of both sides.
            </summary>
        </member>
        <member name="F:Xenko.Animations.BinaryCurveOperator.Subtract">
            <summary>
            Subtracts the right sampled value from the left sampled value.
            </summary>
        </member>
        <member name="F:Xenko.Animations.BinaryCurveOperator.Multiply">
            <summary>
            Multiplies the left sampled value by the right sampled value
            </summary>
        </member>
        <member name="T:Xenko.Animations.ComputeBinaryCurve`1">
            <summary>
            A node which describes a binary operation between two <see cref="T:Xenko.Animations.IComputeCurve`1"/>
            </summary>
            <typeparam name="T">Sampled data's type</typeparam>
        </member>
        <member name="M:Xenko.Animations.ComputeBinaryCurve`1.UpdateChanges">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeBinaryCurve`1.Evaluate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="P:Xenko.Animations.ComputeBinaryCurve`1.Operator">
            <summary>
            The operation used to blend the two values
            </summary>
            <userdoc>
            The operation used to blend the two values
            </userdoc>
        </member>
        <member name="P:Xenko.Animations.ComputeBinaryCurve`1.LeftChild">
            <summary>
            The left child node
            </summary>
            <userdoc>
            The left child value
            </userdoc>
        </member>
        <member name="P:Xenko.Animations.ComputeBinaryCurve`1.RightChild">
            <summary>
            The right child node
            </summary>
            <userdoc>
            The right child value
            </userdoc>
        </member>
        <member name="M:Xenko.Animations.ComputeBinaryCurve`1.Add(`0,`0)">
            <summary>
            Adds the left value to the right value and retuns their sum
            </summary>
            <param name="a">Left value A</param>
            <param name="b">Right value B</param>
            <returns>The sum A + B</returns>
        </member>
        <member name="M:Xenko.Animations.ComputeBinaryCurve`1.Subtract(`0,`0)">
            <summary>
            Subtracts the right value from the left value and retuns the result
            </summary>
            <param name="a">Left value A</param>
            <param name="b">Right value B</param>
            <returns>The result A - B</returns>
        </member>
        <member name="M:Xenko.Animations.ComputeBinaryCurve`1.Multiply(`0,`0)">
            <summary>
            Multiplies the left value to the right value and retuns the result
            </summary>
            <param name="a">Left value A</param>
            <param name="b">Right value B</param>
            <returns>The result A * B</returns>
        </member>
        <member name="T:Xenko.Animations.ComputeConstCurve`1">
            <summary>
            A node which describes a constant value for a compute curve
            </summary>
            <typeparam name="T">Sampled data's type</typeparam>
        </member>
        <member name="P:Xenko.Animations.ComputeConstCurve`1.Value">
            <summary>
            Constant value to return every time this flat curve is sampled
            </summary>
            <userdoc>
            The constant value to return every time this flat function is sampled
            </userdoc>
        </member>
        <member name="M:Xenko.Animations.ComputeConstCurve`1.UpdateChanges">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeConstCurve`1.Evaluate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Animations.ComputeCurveSamplerVector4">
            <summary>
            Sampler container for Vector4 data type
            </summary>
        </member>
        <member name="M:Xenko.Animations.ComputeCurveSamplerVector4.Linear(Xenko.Core.Mathematics.Vector4@,Xenko.Core.Mathematics.Vector4@,System.Single,Xenko.Core.Mathematics.Vector4@)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Animations.ComputeConstCurveVector4">
            <summary>
            Constant Vector4 value for the IComputeCurve interface
            </summary>
        </member>
        <member name="T:Xenko.Animations.ComputeFunctionCurveVector4">
            <summary>
            Function Vector4 value for the IComputeCurve interface
            </summary>
        </member>
        <member name="T:Xenko.Animations.ComputeAnimationCurveVector4">
            <summary>
            Constant Vector4 value for the IComputeCurve interface
            </summary>
        </member>
        <member name="M:Xenko.Animations.ComputeAnimationCurveVector4.Cubic(Xenko.Core.Mathematics.Vector4@,Xenko.Core.Mathematics.Vector4@,Xenko.Core.Mathematics.Vector4@,Xenko.Core.Mathematics.Vector4@,System.Single,Xenko.Core.Mathematics.Vector4@)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeAnimationCurveVector4.Linear(Xenko.Core.Mathematics.Vector4@,Xenko.Core.Mathematics.Vector4@,System.Single,Xenko.Core.Mathematics.Vector4@)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Animations.ComputeBinaryCurveVector4">
            <summary>
            Binary operator Vector4 value for the IComputeCurve interface
            </summary>
        </member>
        <member name="M:Xenko.Animations.ComputeBinaryCurveVector4.Add(Xenko.Core.Mathematics.Vector4,Xenko.Core.Mathematics.Vector4)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeBinaryCurveVector4.Subtract(Xenko.Core.Mathematics.Vector4,Xenko.Core.Mathematics.Vector4)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeBinaryCurveVector4.Multiply(Xenko.Core.Mathematics.Vector4,Xenko.Core.Mathematics.Vector4)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Animations.ComputeCurveSamplerVector3">
            <summary>
            Sampler container for Vector3 data type
            </summary>
        </member>
        <member name="M:Xenko.Animations.ComputeCurveSamplerVector3.Linear(Xenko.Core.Mathematics.Vector3@,Xenko.Core.Mathematics.Vector3@,System.Single,Xenko.Core.Mathematics.Vector3@)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Animations.ComputeConstCurveVector3">
            <summary>
            Constant Vector3 value for the IComputeCurve interface
            </summary>
        </member>
        <member name="T:Xenko.Animations.ComputeFunctionCurveVector3">
            <summary>
            Function Vector3 value for the IComputeCurve interface
            </summary>
        </member>
        <member name="T:Xenko.Animations.ComputeAnimationCurveVector3">
            <summary>
            Constant Vector3 value for the IComputeCurve interface
            </summary>
        </member>
        <member name="M:Xenko.Animations.ComputeAnimationCurveVector3.Cubic(Xenko.Core.Mathematics.Vector3@,Xenko.Core.Mathematics.Vector3@,Xenko.Core.Mathematics.Vector3@,Xenko.Core.Mathematics.Vector3@,System.Single,Xenko.Core.Mathematics.Vector3@)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeAnimationCurveVector3.Linear(Xenko.Core.Mathematics.Vector3@,Xenko.Core.Mathematics.Vector3@,System.Single,Xenko.Core.Mathematics.Vector3@)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Animations.ComputeBinaryCurveVector3">
            <summary>
            Binary operator Vector3 value for the IComputeCurve interface
            </summary>
        </member>
        <member name="M:Xenko.Animations.ComputeBinaryCurveVector3.Add(Xenko.Core.Mathematics.Vector3,Xenko.Core.Mathematics.Vector3)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeBinaryCurveVector3.Subtract(Xenko.Core.Mathematics.Vector3,Xenko.Core.Mathematics.Vector3)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeBinaryCurveVector3.Multiply(Xenko.Core.Mathematics.Vector3,Xenko.Core.Mathematics.Vector3)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Animations.ComputeCurveSamplerVector2">
            <summary>
            Sampler container for Vector2 data type
            </summary>
        </member>
        <member name="M:Xenko.Animations.ComputeCurveSamplerVector2.Linear(Xenko.Core.Mathematics.Vector2@,Xenko.Core.Mathematics.Vector2@,System.Single,Xenko.Core.Mathematics.Vector2@)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Animations.ComputeConstCurveVector2">
            <summary>
            Constant Vector2 value for the IComputeCurve interface
            </summary>
        </member>
        <member name="T:Xenko.Animations.ComputeFunctionCurveVector2">
            <summary>
            Function Vector2 value for the IComputeCurve interface
            </summary>
        </member>
        <member name="T:Xenko.Animations.ComputeAnimationCurveVector2">
            <summary>
            Constant Vector2 value for the IComputeCurve interface
            </summary>
        </member>
        <member name="M:Xenko.Animations.ComputeAnimationCurveVector2.Cubic(Xenko.Core.Mathematics.Vector2@,Xenko.Core.Mathematics.Vector2@,Xenko.Core.Mathematics.Vector2@,Xenko.Core.Mathematics.Vector2@,System.Single,Xenko.Core.Mathematics.Vector2@)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeAnimationCurveVector2.Linear(Xenko.Core.Mathematics.Vector2@,Xenko.Core.Mathematics.Vector2@,System.Single,Xenko.Core.Mathematics.Vector2@)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Animations.ComputeBinaryCurveVector2">
            <summary>
            Binary operator Vector2 value for the IComputeCurve interface
            </summary>
        </member>
        <member name="M:Xenko.Animations.ComputeBinaryCurveVector2.Add(Xenko.Core.Mathematics.Vector2,Xenko.Core.Mathematics.Vector2)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeBinaryCurveVector2.Subtract(Xenko.Core.Mathematics.Vector2,Xenko.Core.Mathematics.Vector2)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeBinaryCurveVector2.Multiply(Xenko.Core.Mathematics.Vector2,Xenko.Core.Mathematics.Vector2)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Animations.ComputeCurveSamplerFloat">
            <summary>
            Sampler container for float data type
            </summary>
        </member>
        <member name="M:Xenko.Animations.ComputeCurveSamplerFloat.Linear(System.Single@,System.Single@,System.Single,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Animations.ComputeConstCurveFloat">
            <summary>
            Constant float value for the IComputeCurve interface
            </summary>
        </member>
        <member name="T:Xenko.Animations.ComputeFunctionCurveFloat">
            <summary>
            Function float value for the IComputeCurve interface
            </summary>
        </member>
        <member name="T:Xenko.Animations.ComputeBinaryCurveFloat">
            <summary>
            Binary operator float value for the IComputeCurve interface
            </summary>
        </member>
        <member name="M:Xenko.Animations.ComputeBinaryCurveFloat.Add(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeBinaryCurveFloat.Subtract(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeBinaryCurveFloat.Multiply(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Animations.ComputeAnimationCurveFloat">
            <summary>
            Animation of a float value for the IComputeCurve interface
            </summary>
        </member>
        <member name="M:Xenko.Animations.ComputeAnimationCurveFloat.Cubic(System.Single@,System.Single@,System.Single@,System.Single@,System.Single,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeAnimationCurveFloat.Linear(System.Single@,System.Single@,System.Single,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Animations.ComputeCurveSamplerQuaternion">
            <summary>
            Sampler container for Quaternion data type
            </summary>
        </member>
        <member name="M:Xenko.Animations.ComputeCurveSamplerQuaternion.Linear(Xenko.Core.Mathematics.Quaternion@,Xenko.Core.Mathematics.Quaternion@,System.Single,Xenko.Core.Mathematics.Quaternion@)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Animations.ComputeConstCurveQuaternion">
            <summary>
            Constant Quaternion value for the IComputeCurve interface
            </summary>
        </member>
        <member name="T:Xenko.Animations.ComputeAnimationCurveQuaternion">
            <summary>
            Constant Quaternion value for the IComputeCurve interface
            </summary>
        </member>
        <member name="M:Xenko.Animations.ComputeAnimationCurveQuaternion.Cubic(Xenko.Core.Mathematics.Quaternion@,Xenko.Core.Mathematics.Quaternion@,Xenko.Core.Mathematics.Quaternion@,Xenko.Core.Mathematics.Quaternion@,System.Single,Xenko.Core.Mathematics.Quaternion@)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeAnimationCurveQuaternion.Linear(Xenko.Core.Mathematics.Quaternion@,Xenko.Core.Mathematics.Quaternion@,System.Single,Xenko.Core.Mathematics.Quaternion@)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Animations.ComputeBinaryCurveQuaternion">
            <summary>
            Binary operator Quaternion value for the IComputeCurve interface
            </summary>
        </member>
        <member name="M:Xenko.Animations.ComputeBinaryCurveQuaternion.Add(Xenko.Core.Mathematics.Quaternion,Xenko.Core.Mathematics.Quaternion)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeBinaryCurveQuaternion.Subtract(Xenko.Core.Mathematics.Quaternion,Xenko.Core.Mathematics.Quaternion)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeBinaryCurveQuaternion.Multiply(Xenko.Core.Mathematics.Quaternion,Xenko.Core.Mathematics.Quaternion)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Animations.ComputeCurveSamplerColor4">
            <summary>
            Sampler container for Color4 data type
            </summary>
        </member>
        <member name="M:Xenko.Animations.ComputeCurveSamplerColor4.Linear(Xenko.Core.Mathematics.Color4@,Xenko.Core.Mathematics.Color4@,System.Single,Xenko.Core.Mathematics.Color4@)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Animations.ComputeConstCurveColor4">
            <summary>
            Constant Color4 value for the IComputeCurve interface
            </summary>
        </member>
        <member name="T:Xenko.Animations.ComputeFunctionCurveColor4">
            <summary>
            Function Color4 value for the IComputeCurve interface
            </summary>
        </member>
        <member name="T:Xenko.Animations.ComputeAnimationCurveColor4">
            <summary>
            Constant Color4 value for the IComputeCurve interface
            </summary>
        </member>
        <member name="M:Xenko.Animations.ComputeAnimationCurveColor4.Cubic(Xenko.Core.Mathematics.Color4@,Xenko.Core.Mathematics.Color4@,Xenko.Core.Mathematics.Color4@,Xenko.Core.Mathematics.Color4@,System.Single,Xenko.Core.Mathematics.Color4@)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeAnimationCurveColor4.Linear(Xenko.Core.Mathematics.Color4@,Xenko.Core.Mathematics.Color4@,System.Single,Xenko.Core.Mathematics.Color4@)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Animations.ComputeBinaryCurveColor4">
            <summary>
            Binary operator Color4 value for the IComputeCurve interface
            </summary>
        </member>
        <member name="M:Xenko.Animations.ComputeBinaryCurveColor4.Add(Xenko.Core.Mathematics.Color4,Xenko.Core.Mathematics.Color4)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeBinaryCurveColor4.Subtract(Xenko.Core.Mathematics.Color4,Xenko.Core.Mathematics.Color4)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeBinaryCurveColor4.Multiply(Xenko.Core.Mathematics.Color4,Xenko.Core.Mathematics.Color4)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Animations.ComputeCurveSampler`1">
            <summary>
            Base interface for curve based compute value nodes.
            </summary>
        </member>
        <member name="M:Xenko.Animations.ComputeCurveSampler`1.Evaluate(System.Single)">
            <summary>
            Evaluates the compute curve's value at the specified location, usually in the [0 .. 1] range
            </summary>
            <param name="location">Location to sample at</param>
            <returns>Sampled value</returns>
        </member>
        <member name="M:Xenko.Animations.ComputeCurveSampler`1.Linear(`0@,`0@,System.Single,`0@)">
            <summary>
            Interface for linera interpolation between two data values
            </summary>
            <param name="value1">Left value</param>
            <param name="value2">Right value</param>
            <param name="t">Lerp amount between 0 and 1</param>
            <param name="result">The interpolated result of linearLerp(L, R, t)</param>
        </member>
        <member name="F:Xenko.Animations.ComputeCurveSampler`1.bakedArray">
            <summary>
            Data in this sampler can be baked to allow faster sampling
            </summary>
        </member>
        <member name="M:Xenko.Animations.ComputeCurveSampler`1.BakeData">
            <summary>
            Bakes the sampled data in a fixed size array for faster access
            </summary>
        </member>
        <member name="M:Xenko.Animations.ComputeCurveSampler`1.UpdateChanges">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Animations.ComputeFunctionCurve`1">
            <summary>
            A node which describes a function over t value for a compute curve
            </summary>
            <typeparam name="T">Sampled data's type</typeparam>
        </member>
        <member name="M:Xenko.Animations.ComputeFunctionCurve`1.UpdateChanges">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeFunctionCurve`1.Evaluate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeSeparateCurveVector3.UpdateChanges">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.ComputeSeparateCurveVector4.UpdateChanges">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Animations.IComputeCurve.UpdateChanges">
            <summary>
            Updates any optimizations in the curve if data has changed.
            </summary>
            <returns><c>true</c> there were changes since the last time; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Xenko.Animations.IComputeCurve`1">
            <summary>
            Base interface for curve based compute value nodes.
            </summary>
        </member>
        <member name="M:Xenko.Animations.IComputeCurve`1.Evaluate(System.Single)">
            <summary>
            Evaluates the compute curve's value at the specified location, usually in the [0 .. 1] range
            </summary>
            <param name="location">Location to sample at</param>
            <returns>Sampled value</returns>
        </member>
        <member name="T:Xenko.Animations.Interpolator">
            <summary>
            Various helper functions for float, Vector2, Vector3, Vector4 and Quaternion interpolations.
            </summary>
        </member>
        <member name="T:Xenko.Animations.KeyFrameData`1">
            <summary>
            A single key frame value.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Xenko.Animations.PlayingAnimation.Enabled">
            <summary>
            Gets or sets a value indicating whether animation is playing.
            </summary>
        </member>
        <member name="P:Xenko.Animations.PlayingAnimation.Name">
            <summary>
            Gets or sets the name of this playing animation (optional).
            </summary>
        </member>
        <member name="P:Xenko.Animations.PlayingAnimation.Clip">
            <summary>
            Gets or sets the animation clip to run
            </summary>
        </member>
        <member name="P:Xenko.Animations.PlayingAnimation.RepeatMode">
            <summary>
            Gets or sets the repeat mode.
            </summary>
        </member>
        <member name="P:Xenko.Animations.PlayingAnimation.BlendOperation">
            <summary>
            Gets or sets the blend operation.
            </summary>
        </member>
        <member name="P:Xenko.Animations.PlayingAnimation.CurrentTime">
            <summary>
            Gets or sets the current time.
            </summary>
        </member>
        <member name="P:Xenko.Animations.PlayingAnimation.TimeFactor">
            <summary>
            Gets or sets the playback speed factor.
            </summary>
        </member>
        <member name="P:Xenko.Animations.PlayingAnimation.Weight">
            <summary>
            Gets or sets the animation weight.
            </summary>
        </member>
        <member name="P:Xenko.Animations.PlayingAnimation.CrossfadeRemainingTime">
            <summary>
            If the <see cref="P:Xenko.Animations.PlayingAnimation.CrossfadeRemainingTime"/> is positive the blend weight will shift towards the target weight, reaching it at CrossfadeRemainingTime == 0
            At that point if the blend weight reaches 0, the animation will be deleted from the list
            </summary>
        </member>
        <member name="T:Xenko.Audio.AudioEmitterProcessor">
            <summary>
            Processor in charge of updating the <see cref="T:Xenko.Engine.AudioEmitterComponent"/>s.
            </summary>
            <remarks>
            <para>More precisely it updates the <see cref="T:Xenko.Audio.AudioEmitter"/>s and 
            then applies 3D localization to each couple <see cref="T:Xenko.Engine.AudioEmitterComponent"/>-<see cref="T:Xenko.Engine.AudioListenerComponent"/>.
            When a new emitter or a new listener is added to the system, its creates the required SoundInstances and associate them with the new emitter/listener tuples.
            </para> 
            </remarks>
        </member>
        <member name="F:Xenko.Audio.AudioEmitterProcessor.audioSystem">
            <summary>
            Reference to the audioSystem.
            </summary>
        </member>
        <member name="T:Xenko.Audio.AudioEmitterProcessor.AssociatedData">
            <summary>
            Data associated to each <see cref="T:Xenko.Engine.Entity"/> instances of the system having an <see cref="F:Xenko.Audio.AudioEmitterProcessor.AssociatedData.AudioEmitterComponent"/> and an <see cref="F:Xenko.Audio.AudioEmitterProcessor.AssociatedData.TransformComponent"/>.
            </summary>
        </member>
        <member name="F:Xenko.Audio.AudioEmitterProcessor.AssociatedData.AudioEmitter">
            <summary>
            The <see cref="T:Xenko.Audio.AudioEmitter"/> associated to the <see cref="F:Xenko.Audio.AudioEmitterProcessor.AssociatedData.AudioEmitterComponent"/>.
            </summary>
        </member>
        <member name="F:Xenko.Audio.AudioEmitterProcessor.AssociatedData.AudioEmitterComponent">
            <summary>
            The <see cref="T:Xenko.Engine.AudioEmitterComponent"/> associated to the entity
            </summary>
        </member>
        <member name="F:Xenko.Audio.AudioEmitterProcessor.AssociatedData.TransformComponent">
            <summary>
            The <see cref="F:Xenko.Audio.AudioEmitterProcessor.AssociatedData.TransformComponent"/> associated to the entity
            </summary>
        </member>
        <member name="F:Xenko.Audio.AudioEmitterProcessor.AssociatedData.IsPlaying">
            <summary>
            If this emitter has some instances playing
            </summary>
        </member>
        <member name="M:Xenko.Audio.AudioEmitterProcessor.#ctor">
            <summary>
            Create a new instance of the processor.
            </summary>
        </member>
        <member name="T:Xenko.Audio.AudioEmitterSoundController">
            <summary>
            This class is used to control a <see cref="T:Xenko.Audio.SoundBase"/> associated to a <see cref="T:Xenko.Engine.AudioEmitterComponent"/>.
            </summary>
            <remarks>
            <para>
            Instances of this class can not be directly created by the user, but need to queried from an <see cref="T:Xenko.Engine.AudioEmitterComponent"/>
            instance using the readonly <see cref="!:AudioEmitterComponent.Item(string)"/> indexer.
            </para>
            <para>
            An instance <see cref="T:Xenko.Audio.AudioEmitterSoundController"/> is not valid anymore if any of those situations arrives:
            <list type="bullet">
             <item><description>The underlying <see cref="F:Xenko.Audio.AudioEmitterSoundController.sound"/> is disposed.</description></item>
             <item><description>The <see cref="T:Xenko.Engine.AudioEmitterComponent"/> is detached from its entity.</description></item>
             <item><description>The entity to which it is attached is removed from the Entity System.</description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="F:Xenko.Audio.AudioEmitterSoundController.InstanceToListener">
            <summary>
            The instances of <see cref="F:Xenko.Audio.AudioEmitterSoundController.sound"/> currently created by this controller (one for each listener).
            </summary>
        </member>
        <member name="M:Xenko.Audio.AudioEmitterSoundController.#ctor(Xenko.Engine.AudioEmitterComponent,Xenko.Audio.SoundBase)">
            <summary>
            Created a new <see cref="T:Xenko.Audio.AudioEmitterSoundController"/> instance.
            </summary>
            <param name="parent">The parent AudioEmitterComponent to which the controller is associated.</param>
            <param name="sound">The underlying SoundBase to be controlled</param>
            <remarks>A <see cref="F:Xenko.Audio.AudioEmitterSoundController.sound"/> can be associated to several controllers.</remarks>
        </member>
        <member name="M:Xenko.Audio.AudioEmitterSoundController.CreateSoundInstance(Xenko.Engine.AudioListenerComponent,System.Boolean)">
            <summary>
            Create an new instance of underlying sound, and register it in the controller's sound instance list.
            </summary>
            <returns>The new sound effect instance created</returns>
        </member>
        <member name="M:Xenko.Audio.AudioEmitterSoundController.DestroyAllSoundInstances">
            <summary>
            Dispose and removes all the controller sound instances.
            </summary>
        </member>
        <member name="P:Xenko.Audio.AudioEmitterSoundController.IsLooping">
            <summary>
            Gets or sets whether the sound is automatically looping from beginning when it reaches the end.
            </summary>
        </member>
        <member name="F:Xenko.Audio.AudioEmitterSoundController.ShouldBePlayed">
            <summary>
            Indicate the <see cref="T:Xenko.Audio.AudioListenerProcessor"/> if the controller's sound instances need to be played.
            This variable is need because <see cref="M:Xenko.Audio.AudioEmitterSoundController.Play"/> is asynchronous and actually starts playing only on next system update.
            </summary>
        </member>
        <member name="M:Xenko.Audio.AudioEmitterSoundController.PlayAndForget">
            <summary>
            Plays the attached sound in a new instance and let's the engine handle it's disposal.
            This is useful for very fast overlapping sounds, gun shots, machine gun etc. Where you don't care about controlling each sound.
            </summary>
        </member>
        <member name="M:Xenko.Audio.AudioEmitterSoundController.SetRange(Xenko.Media.PlayRange)">
            <summary>
            Sets the range of the sound to play.
            </summary>
            <param name="range">a PlayRange structure that describes the starting offset and ending point of the sound to play in seconds.</param>
            <remarks>This will not be valid if the sound is played with PlayAndForget</remarks>
        </member>
        <member name="T:Xenko.Audio.AudioListenerProcessor">
            <summary>
            Processor in charge of creating and updating the <see cref="T:Xenko.Audio.AudioListener"/> data associated to the scene <see cref="T:Xenko.Engine.AudioListenerComponent"/>s.
            </summary>
            <remarks>
            The processor updates only <see cref="T:Xenko.Audio.AudioListener"/> associated to <see cref="T:Xenko.Engine.AudioListenerComponent"/>s 
            The processor is subscribing to the <see cref="F:Xenko.Audio.AudioListenerProcessor.audioSystem"/> <see cref="T:Xenko.Engine.AudioListenerComponent"/> collection events to be informed of required <see cref="T:Xenko.Audio.AudioEmitter"/> updates.
            When a <see cref="T:Xenko.Engine.AudioListenerComponent"/> is added to the <see cref="F:Xenko.Audio.AudioListenerProcessor.audioSystem"/>, the processor set the associated <see cref="T:Xenko.Audio.AudioEmitter"/>.
            When a <see cref="T:Xenko.Engine.AudioListenerComponent"/> is removed from the entity system, 
            the processor set the <see cref="T:Xenko.Audio.AudioEmitter"/> reference of the <see cref="T:Xenko.Audio.AudioSystem"/> to null 
            but do not remove the <see cref="T:Xenko.Engine.AudioListenerComponent"/> from its collection.
            </remarks>
        </member>
        <member name="F:Xenko.Audio.AudioListenerProcessor.audioSystem">
            <summary>
            Reference to the <see cref="T:Xenko.Audio.AudioSystem"/> of the game instance.
            </summary>
        </member>
        <member name="M:Xenko.Audio.AudioListenerProcessor.#ctor">
            <summary>
            Create a new instance of AudioListenerProcessor.
            </summary>
        </member>
        <member name="T:Xenko.Audio.AudioSystem">
            <summary>
            The Audio System.
            It creates an underlying instance of <see cref="P:Xenko.Audio.AudioSystem.AudioEngine"/>.
            </summary>
        </member>
        <member name="M:Xenko.Audio.AudioSystem.#ctor(Xenko.Core.IServiceRegistry)">
            <summary>
            Create an new instance of AudioSystem
            </summary>
            <param name="registry">The service registry in which to register the <see cref="T:Xenko.Audio.AudioSystem"/> services</param>
        </member>
        <member name="P:Xenko.Audio.AudioSystem.AudioEngine">
            <summary>
            The underlying <see cref="P:Xenko.Audio.AudioSystem.AudioEngine" />.
            </summary>
            <value>The audio engine.</value>
        </member>
        <member name="F:Xenko.Audio.AudioSystem.Listeners">
            <summary>
            A collection containing the <see cref="T:Xenko.Engine.AudioListenerComponent"/>-<see cref="T:Xenko.Audio.AudioListener"/> associations.
            The AudioListenerComponent keys are added/removed by the user by calls to <see cref="M:Xenko.Audio.AudioSystem.AddListener(Xenko.Engine.AudioListenerComponent)"/>/<see cref="M:Xenko.Audio.AudioSystem.RemoveListener(Xenko.Engine.AudioListenerComponent)"/>.
            The AudioListener values are created/updated by the <see cref="T:Xenko.Audio.AudioListenerProcessor"/>. 
            </summary>
            <remarks>When a AudioListenerComponent is added to the AudioSystem but not present in the Entity System, 
            a valid AudioListener can not be computed. Thus we set its value to 'null'.</remarks>
        </member>
        <member name="M:Xenko.Audio.AudioSystem.AddListener(Xenko.Engine.AudioListenerComponent)">
            <summary>
            Add and activate a <see cref="T:Xenko.Engine.AudioListenerComponent" /> to the Audio System.
            After this call sounds played via <see cref="T:Xenko.Audio.AudioEmitterSoundController" />s will be heard by this listener.
            </summary>
            <param name="listener">The listener to add to the audio system.</param>
            <remarks>Adding a listener already added as no effects.</remarks>
        </member>
        <member name="M:Xenko.Audio.AudioSystem.RemoveListener(Xenko.Engine.AudioListenerComponent)">
            <summary>
            Remove a <see cref="T:Xenko.Engine.AudioListenerComponent" /> from the Audio System.
            After this call sounds played via <see cref="T:Xenko.Audio.AudioEmitterSoundController" />s will not be heard by this listener anymore.
            </summary>
            <param name="listener">The listener to remove from the audio system.</param>
            <exception cref="T:System.ArgumentException">The provided listener was not present in the Audio System.</exception>
        </member>
        <member name="T:Xenko.Engine.ActivableEntityComponent">
            <summary>
            An <see cref="T:Xenko.Engine.EntityComponent"/> that can be enabled and disabled.
            </summary>
        </member>
        <member name="P:Xenko.Engine.ActivableEntityComponent.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Xenko.Engine.EntityComponent"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Xenko.Engine.AllowMultipleComponentsAttribute">
            <summary>
            Allows a component of the same type to be added multiple time to the same entity (default is <c>false</c>)
            </summary>
        </member>
        <member name="T:Xenko.Engine.AnimationComponent">
            <summary>
            Add animation capabilities to an <see cref="T:Xenko.Engine.Entity"/>. It will usually apply to <see cref="P:Xenko.Engine.ModelComponent.Skeleton"/>
            </summary>
            <remarks>
            Data is stored as in http://altdevblogaday.com/2011/10/23/low-level-animation-part-2/.
            </remarks>
        </member>
        <member name="P:Xenko.Engine.AnimationComponent.Animations">
            <summary>
            Gets the animations associated to the component.
            </summary>
            <userdoc>The list of the animation associated to the entity.</userdoc>
        </member>
        <member name="M:Xenko.Engine.AnimationComponent.Play(System.String)">
            <summary>
            Plays right away the animation with the specified name, instantly removing all other blended animations.
            </summary>
            <param name="name">The animation name.</param>
        </member>
        <member name="M:Xenko.Engine.AnimationComponent.IsPlaying(System.String)">
            <summary>
            Returns <c>true</c> if the specified animation is in the list of currently playing animations
            </summary>
            <param name="name">The name of the animation to check</param>
            <returns><c>true</c> if the animation is playing, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Xenko.Engine.AnimationComponent.Add(Xenko.Animations.AnimationClip,System.Double,Xenko.Animations.AnimationBlendOperation,System.Single,System.Single,System.Nullable{Xenko.Animations.AnimationRepeatMode})">
            <summary>
            Adds a new playing animation at the end of the list. It doesn't alter currently playing animations.
            </summary>
            <param name="clip">Animation clip to add to the list of playing animations</param>
            <param name="timeScale">Speed at which the animation should play</param>
            <param name="weight">Weight of the animation, in regard to all other playing animations.</param>
            <param name="startTime">Time, in seconds, at which the animation starts playing</param>
            <param name="blend">Blend mode - linear or additive</param>
            <param name="repeatMode">Repeat mode - play once or loop indefinitely</param>
            <returns>The added playing animation</returns>
        </member>
        <member name="M:Xenko.Engine.AnimationComponent.Crossfade(System.String,System.TimeSpan)">
            <summary>
            Crossfades to a new animation.
            </summary>
            <param name="name">The name.</param>
            <param name="fadeTimeSpan">The fade time span.</param>
            <exception cref="T:System.ArgumentException">name</exception>
        </member>
        <member name="M:Xenko.Engine.AnimationComponent.Blend(System.String,System.Single,System.TimeSpan)">
            <summary>
            Blends progressively a new animation.
            </summary>
            <param name="name">The name.</param>
            <param name="desiredWeight">The desired weight.</param>
            <param name="fadeTimeSpan">The fade time span.</param>
            <exception cref="T:System.ArgumentException">name</exception>
        </member>
        <member name="P:Xenko.Engine.AnimationComponent.PlayingAnimations">
            <summary>
            Gets list of active animations. Use this to customize startup animations.
            </summary>
        </member>
        <member name="M:Xenko.Engine.AnimationComponent.Ended(Xenko.Animations.PlayingAnimation)">
            <summary>
            Returns an awaitable object that will be completed when the animation is removed from the PlayingAnimation list.
            This happens when:
            - RepeatMode is PlayOnce and animation reached end
            - Animation faded out completely (due to blend to 0.0 or crossfade out)
            - Animation was manually removed from AnimationComponent.PlayingAnimations
            </summary>
            <returns></returns>
        </member>
        <member name="T:Xenko.Engine.AsyncScript">
            <summary>
            A script which can be implemented as an async microthread.
            </summary>
        </member>
        <member name="P:Xenko.Engine.AsyncScript.CancellationToken">
            <summary>
            Gets a token indicating if the script execution was canceled.
            </summary>
        </member>
        <member name="M:Xenko.Engine.AsyncScript.Execute">
            <summary>
            Called once, as a microthread
            </summary>
            <returns></returns>
        </member>
        <member name="T:Xenko.Engine.AudioEmitterComponent">
            <summary>
            Component representing an audio emitter.
            </summary>
            <remarks>
            <para>
            Associate this component to an entity to simulate a 3D localized source of sound coming from the entity center.
            </para>
            <para>
            Several sounds can be associated to a single AudioEmitterComponent.
            Use the <see cref="F:Xenko.Engine.AudioEmitterComponent.Sounds"/> dictionary to associate or dissociate a <see cref="T:Xenko.Audio.SoundBase"/> to the emitter component.
            Each SoundBase associated to the emitter component can be controlled (played, paused, stopped, ...) independently for the others.
            Once attached to the emitter component, a SoundBase is controlled using a <see cref="T:Xenko.Audio.AudioEmitterSoundController"/>.
            To get the AudioEmitterSoundController associated to a SoundBase use the readonly <see cref="!:AudioEmitterComponent.Item(string)"/> indexer.
            </para>
            </remarks>
        </member>
        <member name="F:Xenko.Engine.AudioEmitterComponent.SoundToController">
            <summary>
            Dictionary associating each SoundBase to a single soundController.
            The controller a valid as long as the corresponding SoundBase is present in the dictionary.
            </summary>
        </member>
        <member name="T:Xenko.Engine.AudioEmitterComponent.ControllerCollectionChangedEventArgs">
            <summary>
            Event argument class used to signal the <see cref="T:Xenko.Audio.AudioEmitterProcessor"/> that a new AudioEmitterSoundController has new added or removed to the component.
            </summary>
        </member>
        <member name="F:Xenko.Engine.AudioEmitterComponent.ControllerCollectionChangedEventArgs.Entity">
            <summary>
            The entity associated the current component.
            </summary>
        </member>
        <member name="F:Xenko.Engine.AudioEmitterComponent.ControllerCollectionChangedEventArgs.Controller">
            <summary>
            The controller that have been added or removed to the component.
            </summary>
        </member>
        <member name="F:Xenko.Engine.AudioEmitterComponent.ControllerCollectionChangedEventArgs.EmitterComponent">
            <summary>
            The AudioEmitterComponent itself
            </summary>
        </member>
        <member name="F:Xenko.Engine.AudioEmitterComponent.ControllerCollectionChangedEventArgs.Action">
            <summary>
            Action indication if the controller has been added or removed.
            </summary>
        </member>
        <member name="E:Xenko.Engine.AudioEmitterComponent.ControllerCollectionChanged">
            <summary>
            Event triggered when an <see cref="T:Xenko.Audio.AudioEmitterSoundController"/> has be attached or detached to the component.
            </summary>
        </member>
        <member name="F:Xenko.Engine.AudioEmitterComponent.Sounds">
            <summary>
            The sounds this audio emitter can play and use
            </summary>
        </member>
        <member name="P:Xenko.Engine.AudioEmitterComponent.Item(System.String)">
            <summary>
            The sound controllers associated with the sounds this audio emitter can play and use, use this to access and play sounds.
            </summary>
            <param name="soundName">The name of the sound you want to access.</param>
            <returns>The sound controller.</returns>
        </member>
        <member name="P:Xenko.Engine.AudioEmitterComponent.UseHRTF">
            <summary>
            If possible use a more complex HRTF algorithm to perform 3D sound simulation
            </summary>
            <userdoc>
            If possible use a more complex HRTF algorithm to perform 3D sound simulation
            </userdoc>
        </member>
        <member name="P:Xenko.Engine.AudioEmitterComponent.DirectionalFactor">
            <summary>
            If 0 the sound will be omnidirectional, 1 fully directional
            </summary>
            <userdoc>
            If 0 the sound will be omnidirectional, 1 fully directional
            </userdoc>
        </member>
        <member name="P:Xenko.Engine.AudioEmitterComponent.Environment">
            <summary>
            The reverberation model that this emitter will use
            </summary>
            <userdoc>
            The reverberation model that this emitter will use
            </userdoc>
        </member>
        <member name="M:Xenko.Engine.AudioEmitterComponent.AttachSound(Xenko.Audio.SoundBase)">
            <summary>
            Attach a <see cref="T:Xenko.Audio.SoundBase"/> to this emitter component.
            Once attached a <see cref="T:Xenko.Audio.AudioEmitterSoundController"/> can be queried using readonly <see cref="!:AudioEmitterComponent.Item(string)"/> indexer to control the attached SoundBase.
            </summary>
            <param name="sound">The SoundBase to attach</param>
            <exception cref="T:System.ArgumentNullException">The provided <paramref name="sound"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The provided <paramref name="sound"/> can not be localized (contains more than one channel).</exception>
            <remarks>Attaching a SoundBase already attached has no effects.</remarks>
        </member>
        <member name="M:Xenko.Engine.AudioEmitterComponent.DetachSound(Xenko.Audio.SoundBase)">
            <summary>
            Detach a <see cref="T:Xenko.Audio.SoundBase"/> from this emitter component.
            Once detach the controller previously associated to the SoundBase is invalid.
            </summary>
            <param name="sound">The SoundBase to detach.</param>
            <exception cref="T:System.ArgumentNullException">The provided <paramref name="sound"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The provided <paramref name="sound"/> is not currently attached to the emitter component.</exception>
        </member>
        <member name="T:Xenko.Engine.AudioListenerComponent">
            <summary>
            Component representing an audio listener.
            </summary>
            <remarks>
            <para>Associate this component to an <see cref="T:Xenko.Engine.Entity"/> to simulate a physical listener listening to the <see cref="T:Xenko.Engine.AudioEmitterComponent"/>s of the scene,
            placed at the entity's center and oriented along the entity's Oz (forward) and Oy (up) vectors.</para>
            <para>Use the AudioSytem's <see cref="M:Xenko.Audio.AudioSystem.AddListener(Xenko.Engine.AudioListenerComponent)"/> and <see cref="M:Xenko.Audio.AudioSystem.RemoveListener(Xenko.Engine.AudioListenerComponent)"/> functions 
            to activate/deactivate the listeners that are actually listening at a given time.</para>
            <para>The entity needs to be added to the Entity System so that the associated AudioListenerComponent can be processed.</para></remarks>
        </member>
        <member name="T:Xenko.Engine.BackgroundComponent">
            <summary>
            Add a background to an <see cref="T:Xenko.Engine.Entity"/>.
            </summary>
        </member>
        <member name="M:Xenko.Engine.BackgroundComponent.#ctor">
            <summary>
            Create an empty Background component.
            </summary>
        </member>
        <member name="P:Xenko.Engine.BackgroundComponent.Texture">
            <summary>
            Gets or sets the texture to use as background
            </summary>
            <userdoc>The reference to the texture to use as background</userdoc>
        </member>
        <member name="P:Xenko.Engine.BackgroundComponent.Intensity">
            <summary>
            Gets or sets the intensity.
            </summary>
            <value>The intensity.</value>
            <userdoc>The intensity of the background color</userdoc>
        </member>
        <member name="P:Xenko.Engine.BackgroundComponent.RenderGroup">
            <summary>
            The render group for this component.
            </summary>
        </member>
        <member name="P:Xenko.Engine.BackgroundComponent.Is2D">
            <summary>
            Indicate if the background should behave like a 2D image.
            </summary>
            <userdoc>Use the texture as a static 2D background (useful for 2D applications)</userdoc>
        </member>
        <member name="T:Xenko.Engine.CameraComponent">
            <summary>
            Describes the camera projection and view.
            </summary>
        </member>
        <member name="M:Xenko.Engine.CameraComponent.#ctor">
            <summary>
            Create a new <see cref="T:Xenko.Engine.CameraComponent"/> instance.
            </summary>
        </member>
        <member name="M:Xenko.Engine.CameraComponent.#ctor(System.Single,System.Single)">
            <summary>
            Create a new <see cref="T:Xenko.Engine.CameraComponent" /> instance with the provided target, near plane and far plane.
            </summary>
            <param name="nearClipPlane">The near plane value</param>
            <param name="farClipPlane">The far plane value</param>
        </member>
        <member name="P:Xenko.Engine.CameraComponent.Projection">
            <summary>
            Gets or sets the projection.
            </summary>
            <value>The projection.</value>
            <userdoc>The type of projection used by the camera</userdoc>
        </member>
        <member name="P:Xenko.Engine.CameraComponent.VerticalFieldOfView">
            <summary>
            Gets or sets the vertical field of view in degrees.
            </summary>
            <value>
            The vertical field of view.
            </value>
            <userdoc>The vertical field of view (in degrees)</userdoc>
        </member>
        <member name="P:Xenko.Engine.CameraComponent.OrthographicSize">
            <summary>
            Gets or sets the height of the orthographic projection.
            </summary>
            <value>
            The height of the orthographic projection.
            </value>
            <userdoc>The height of the orthographic projection (the orthographic width is automatically calculated based on the target ratio)</userdoc>
        </member>
        <member name="P:Xenko.Engine.CameraComponent.NearClipPlane">
            <summary>
            Gets or sets the near plane distance.
            </summary>
            <value>
            The near plane distance.
            </value>
            <userdoc>The nearest point the camera can see</userdoc>
        </member>
        <member name="P:Xenko.Engine.CameraComponent.FarClipPlane">
            <summary>
            Gets or sets the far plane distance.
            </summary>
            <value>
            The far plane distance.
            </value>
            <userdoc>The furthest point the camera can see</userdoc>
        </member>
        <member name="P:Xenko.Engine.CameraComponent.UseCustomAspectRatio">
            <summary>
            Gets or sets a value indicating whether to use a custom <see cref="P:Xenko.Engine.CameraComponent.AspectRatio"/>. Default is <c>false</c>, meaning that the aspect ratio is calculated from the ratio of the current viewport when rendering.
            </summary>
            <value>The use custom aspect ratio.</value>
            <userdoc>Use a custom aspect ratio you specify. Otherwise, automatically adjust the aspect ratio to the render target ratio.</userdoc>
        </member>
        <member name="P:Xenko.Engine.CameraComponent.AspectRatio">
            <summary>
            Gets or sets the aspect ratio.
            </summary>
            <value>
            The aspect ratio.
            </value>
            <userdoc>The aspect ratio for the camera (when the Custom aspect ratio option is selected)</userdoc>
        </member>
        <member name="F:Xenko.Engine.CameraComponent.Slot">
            <userdoc>The camera slot used in the graphics compositor)</userdoc>
        </member>
        <member name="P:Xenko.Engine.CameraComponent.UseCustomViewMatrix">
            <summary>
            Gets or sets a value indicating whether to use custom <see cref="F:Xenko.Engine.CameraComponent.ViewMatrix"/>. Default is <c>false</c>
            </summary>
            <value><c>true</c> if use custom <see cref="F:Xenko.Engine.CameraComponent.ViewMatrix"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Xenko.Engine.CameraComponent.ViewMatrix">
            <summary>
            Gets or sets the local view matrix. See remarks.
            </summary>
            <value>The local view matrix.</value>
            <remarks>
            This value is updated when calling <see cref="M:Xenko.Engine.CameraComponent.Update"/> or is directly used when <see cref="P:Xenko.Engine.CameraComponent.UseCustomViewMatrix"/> is <c>true</c>.
            </remarks>
        </member>
        <member name="P:Xenko.Engine.CameraComponent.UseCustomProjectionMatrix">
            <summary>
            Gets or sets a value indicating whether to use custom <see cref="F:Xenko.Engine.CameraComponent.ProjectionMatrix"/>. Default is <c>false</c>
            </summary>
            <value><c>true</c> if use custom <see cref="F:Xenko.Engine.CameraComponent.ProjectionMatrix"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Xenko.Engine.CameraComponent.ProjectionMatrix">
            <summary>
            Gets or sets the local projection matrix. See remarks.
            </summary>
            <value>The local projection matrix.</value>
            <remarks>
            This value is updated when calling <see cref="M:Xenko.Engine.CameraComponent.Update"/> or is directly used when <see cref="P:Xenko.Engine.CameraComponent.UseCustomViewMatrix"/> is <c>true</c>.
            </remarks>
        </member>
        <member name="F:Xenko.Engine.CameraComponent.ViewProjectionMatrix">
            <summary>
            The view projection matrix calculated automatically after calling <see cref="M:Xenko.Engine.CameraComponent.Update"/> method.
            </summary>
        </member>
        <member name="F:Xenko.Engine.CameraComponent.Frustum">
            <summary>
            The frustum extracted from the view projection matrix calculated automatically after calling <see cref="M:Xenko.Engine.CameraComponent.Update"/> method.
            </summary>
        </member>
        <member name="M:Xenko.Engine.CameraComponent.Update">
            <summary>
            Calculates the projection matrix and view matrix.
            </summary>
        </member>
        <member name="M:Xenko.Engine.CameraComponent.Update(System.Nullable{System.Single})">
            <summary>
            Calculates the projection matrix and view matrix.
            </summary>
            <param name="screenAspectRatio">The current screen aspect ratio. If null, use the <see cref="P:Xenko.Engine.CameraComponent.AspectRatio"/> even if <see cref="P:Xenko.Engine.CameraComponent.UseCustomAspectRatio"/> is false.</param>
        </member>
        <member name="T:Xenko.Engine.ComponentCategoryAttribute">
            <summary>
            Defines the category of a component type. This information is used to group component types in Game Studio.
            </summary>
        </member>
        <member name="M:Xenko.Engine.ComponentCategoryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Engine.ComponentCategoryAttribute"/> class.
            </summary>
            <param name="category">The category of the associated component.</param>
            <exception cref="T:System.ArgumentNullException">If category is null or empty.</exception>
        </member>
        <member name="P:Xenko.Engine.ComponentCategoryAttribute.Category">
            <summary>
            Gets the category of the associated component
            </summary>
        </member>
        <member name="M:Xenko.Engine.ComponentCategoryAttribute.GetCategory(System.Type)">
            <summary>
            Gets the category for the component type.
            </summary>
            <param name="type">The type to get the attribute from</param>
            <returns>The category.</returns>
        </member>
        <member name="T:Xenko.Engine.ComponentOrderAttribute">
            <summary>
            Defines the order of a component type. This information is used to determine the most "important" component of a collection
            </summary>
        </member>
        <member name="M:Xenko.Engine.ComponentOrderAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Engine.ComponentOrderAttribute"/> class.
            </summary>
            <param name="order">The order of the associated component.</param>
        </member>
        <member name="P:Xenko.Engine.ComponentOrderAttribute.Order">
            <summary>
            Gets the order of the associated component.
            </summary>
        </member>
        <member name="T:Xenko.Engine.Design.CloneSerializer`1">
            <summary>
            Serializer for helping cloning of <see cref="T:Xenko.Engine.Entity"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Xenko.Engine.Design.DefaultEntityComponentProcessorAttribute">
            <summary>
            An attribute used to associate a default <see cref="T:Xenko.Engine.EntityProcessor"/> to an entity component.
            </summary>
        </member>
        <member name="M:Xenko.Engine.Design.DefaultEntityComponentProcessorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Engine.Design.DefaultEntityComponentProcessorAttribute"/> class.
            </summary>
            <param name="type">The type must derived from <see cref="T:Xenko.Engine.EntityProcessor"/>.</param>
        </member>
        <member name="T:Xenko.Engine.Design.DefaultEntityComponentRendererAttribute">
            <summary>
            An attribute used to associate a default <see cref="T:Xenko.Rendering.IEntityComponentRenderProcessor"/> to an entity component.
            </summary>
        </member>
        <member name="M:Xenko.Engine.Design.DefaultEntityComponentRendererAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Engine.Design.DefaultEntityComponentRendererAttribute"/> class.
            </summary>
            <param name="type">The type must derived from <see cref="T:Xenko.Rendering.IEntityComponentRenderProcessor"/>.</param>
        </member>
        <member name="M:Xenko.Engine.Design.DefaultEntityComponentRendererAttribute.#ctor(System.Type,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Engine.Design.DefaultEntityComponentRendererAttribute" /> class.
            </summary>
            <param name="type">The type must derived from <see cref="T:Xenko.Rendering.IEntityComponentRenderProcessor" />.</param>
            <param name="order">The order.</param>
        </member>
        <member name="T:Xenko.Engine.Design.EffectCompilationMode">
            <summary>
            Defines how <see cref="!:EffectCompilerFactory.CreateEffectCompiler"/> tries to create compiler.
            </summary>
        </member>
        <member name="F:Xenko.Engine.Design.EffectCompilationMode.None">
            <summary>
            Effects can't be compiled. <see cref="T:Xenko.Shaders.Compiler.NullEffectCompiler"/> will be used.
            </summary>
        </member>
        <member name="F:Xenko.Engine.Design.EffectCompilationMode.Local">
            <summary>
            Effects can only be compiled in process (if possible). <see cref="T:Xenko.Shaders.Compiler.EffectCompiler"/> will be used.
            </summary>
        </member>
        <member name="F:Xenko.Engine.Design.EffectCompilationMode.Remote">
            <summary>
            Effects can only be compiled over network. <see cref="T:Xenko.Shaders.Compiler.RemoteEffectCompiler"/> will be used.
            </summary>
        </member>
        <member name="F:Xenko.Engine.Design.EffectCompilationMode.LocalOrRemote">
            <summary>
            Effects can be compiled either in process (if possible) or over network otherwise.
            </summary>
        </member>
        <member name="P:Xenko.Engine.Design.EntityChildPropertyResolver.EntityChildPropertyAccessor.MemberType">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Design.EntityChildPropertyResolver.EntityChildPropertyAccessor.GetBlittable(System.IntPtr,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Design.EntityChildPropertyResolver.EntityChildPropertyAccessor.SetBlittable(System.IntPtr,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Design.EntityChildPropertyResolver.EntityChildPropertyAccessor.SetStruct(System.IntPtr,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Design.EntityChildPropertyResolver.EntityChildPropertyAccessor.GetStructAndUnbox(System.IntPtr,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Design.EntityChildPropertyResolver.EntityChildPropertyAccessor.GetObject(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Design.EntityChildPropertyResolver.EntityChildPropertyAccessor.SetObject(System.IntPtr,System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:Xenko.Engine.Design.EntityChildPropertyResolver.EntityComponentPropertyAccessor.MemberType">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Design.EntityChildPropertyResolver.EntityComponentPropertyAccessor.GetBlittable(System.IntPtr,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Design.EntityChildPropertyResolver.EntityComponentPropertyAccessor.SetBlittable(System.IntPtr,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Design.EntityChildPropertyResolver.EntityComponentPropertyAccessor.SetStruct(System.IntPtr,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Design.EntityChildPropertyResolver.EntityComponentPropertyAccessor.GetStructAndUnbox(System.IntPtr,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Design.EntityChildPropertyResolver.EntityComponentPropertyAccessor.GetObject(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Design.EntityChildPropertyResolver.EntityComponentPropertyAccessor.SetObject(System.IntPtr,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Engine.Design.EntityCloner">
            <summary>
            Provides method for deep cloning of en <see cref="T:Xenko.Engine.Entity"/>.
            </summary>
        </member>
        <member name="M:Xenko.Engine.Design.EntityCloner.Clone(Xenko.Engine.Prefab)">
            <summary>
            Clones the specified prefab.
            <see cref="T:Xenko.Engine.Entity"/>, children <see cref="T:Xenko.Engine.Entity"/> and their <see cref="T:Xenko.Engine.EntityComponent"/> will be cloned.
            Other assets will be shared.
            </summary>
            <param name="prefab">The prefab to clone.</param>
            <returns>A cloned prefab</returns>
        </member>
        <member name="M:Xenko.Engine.Design.EntityCloner.Clone(Xenko.Engine.Entity)">
            <summary>
            Clones the specified entity.
            <see cref="T:Xenko.Engine.Entity"/>, children <see cref="T:Xenko.Engine.Entity"/> and their <see cref="T:Xenko.Engine.EntityComponent"/> will be cloned.
            Other assets will be shared.
            </summary>
            <param name="entity">The entity.</param>
            <returns>A cloned entity</returns>
        </member>
        <member name="M:Xenko.Engine.Design.EntityCloner.CollectEntityTreeHelper(Xenko.Engine.Entity,System.Collections.Generic.HashSet{System.Object})">
            <summary>
            Collect entities and components recursively from an entity and add them to a hashset.
            </summary>
            <param name="entity">The entity to collect</param>
            <param name="entityAndComponents">The collected entities and components</param>
        </member>
        <member name="M:Xenko.Engine.Design.EntityCloner.Clone``1(System.Collections.Generic.HashSet{System.Object},Xenko.Engine.Design.EntityCloner.TryGetValueFunction{System.Object,System.Object},``0)">
            <summary>
            Clones the specified object, taking special care of <see cref="T:Xenko.Engine.Entity"/>, <see cref="T:Xenko.Engine.EntityComponent"/> and external assets.
            User can optionally provides list of cloned objects (list of data reference objects that should be cloned)
            and mapped objects (list of data reference objects that should be ducplicated using the given instance).
            </summary>
            <param name="clonedObjects">The cloned objects.</param>
            <param name="mappedObjects">The mapped objects.</param>
            <param name="entity">The entity.</param>
            <returns>The cloned object.</returns>
        </member>
        <member name="T:Xenko.Engine.Design.EntityCloner.CloneContext">
            <summary>
            Helper class for cloning <see cref="T:Xenko.Engine.Entity"/>.
            </summary>
        </member>
        <member name="F:Xenko.Engine.Design.EntityCloner.CloneContext.ClonedObjects">
            <summary>
            Lists objects that should be cloned.
            </summary>
        </member>
        <member name="F:Xenko.Engine.Design.EntityCloner.CloneContext.SharedObjects">
            <summary>
            Stores objects that should be reused in the new cloned instance.
            </summary>
        </member>
        <member name="F:Xenko.Engine.Design.EntityCloner.CloneContext.EntitySerializerSelector">
            <summary>
            Special serializer that goes through <see cref="F:Xenko.Engine.Design.EntityCloner.CloneContext.EntitySerializerSelector"/> and <see cref="T:Xenko.Engine.Design.CloneEntityComponentSerializer`1"/>.
            </summary>
        </member>
        <member name="T:Xenko.Engine.Design.EntityComponentEventArgs">
            <summary>
            An event when an <see cref="T:Xenko.Engine.EntityComponent"/> changed in an <see cref="F:Xenko.Engine.Design.EntityComponentEventArgs.Entity"/>.
            </summary>
        </member>
        <member name="M:Xenko.Engine.Design.EntityComponentEventArgs.#ctor(Xenko.Engine.Entity,System.Int32,Xenko.Engine.EntityComponent,Xenko.Engine.EntityComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Engine.Design.EntityComponentEventArgs"/> struct.
            </summary>
            <param name="entity">The entity.</param>
            <param name="componentKey">The component key.</param>
            <param name="previousComponent">The previous component.</param>
            <param name="newComponent">The new component.</param>
        </member>
        <member name="F:Xenko.Engine.Design.EntityComponentEventArgs.Entity">
            <summary>
            The entity
            </summary>
        </member>
        <member name="F:Xenko.Engine.Design.EntityComponentEventArgs.Index">
            <summary>
            The index of the component in the entity
            </summary>
        </member>
        <member name="F:Xenko.Engine.Design.EntityComponentEventArgs.PreviousComponent">
            <summary>
            The previous component
            </summary>
        </member>
        <member name="F:Xenko.Engine.Design.EntityComponentEventArgs.NewComponent">
            <summary>
            The new component
            </summary>
        </member>
        <member name="T:Xenko.Engine.Design.ExecutionMode">
            <summary>
            Describes the different execution mode of the engine.
            </summary>
        </member>
        <member name="T:Xenko.Engine.Design.GameSettings">
            <summary>
            Stores some default parameters for the game.
            </summary>
        </member>
        <member name="P:Xenko.Engine.Design.GameSettings.CompilationMode">
            <summary>
            Gets or sets the compilation mode used.
            </summary>
        </member>
        <member name="P:Xenko.Engine.Design.GameSettings.EffectCompilation">
            <summary>
            Gets or sets a value indicating whether effect compile should be allowed, and if yes, should it be done locally (if possible) or remotely?
            </summary>
        </member>
        <member name="P:Xenko.Engine.Design.GameSettings.RecordUsedEffects">
            <summary>
            Gets or sets a value indicating whether effect compile (local or remote) should be recorded and sent to effect compile server for GameStudio notification.
            </summary>
        </member>
        <member name="P:Xenko.Engine.Design.GameSettings.Configurations">
            <summary>
            Gets or sets configuration for the actual running platform as compiled during build
            </summary>
        </member>
        <member name="P:Xenko.Engine.Design.IGameSettingsService.Settings">
            <summary>
            Gets the GameSettings
            </summary>
        </member>
        <member name="P:Xenko.Engine.Design.ParameterCollectionResolver.ValueParameterCollectionAccessor`1.MemberType">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Design.ParameterCollectionResolver.ValueParameterCollectionAccessor`1.GetBlittable(System.IntPtr,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Design.ParameterCollectionResolver.ValueParameterCollectionAccessor`1.SetBlittable(System.IntPtr,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Design.ParameterCollectionResolver.ValueParameterCollectionAccessor`1.SetStruct(System.IntPtr,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Design.ParameterCollectionResolver.ValueParameterCollectionAccessor`1.GetStructAndUnbox(System.IntPtr,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Design.ParameterCollectionResolver.ValueParameterCollectionAccessor`1.GetObject(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Design.ParameterCollectionResolver.ValueParameterCollectionAccessor`1.SetObject(System.IntPtr,System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:Xenko.Engine.Design.ParameterCollectionResolver.ObjectParameterCollectionAccessor.MemberType">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Design.ParameterCollectionResolver.ObjectParameterCollectionAccessor.GetBlittable(System.IntPtr,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Design.ParameterCollectionResolver.ObjectParameterCollectionAccessor.SetBlittable(System.IntPtr,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Design.ParameterCollectionResolver.ObjectParameterCollectionAccessor.SetStruct(System.IntPtr,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Design.ParameterCollectionResolver.ObjectParameterCollectionAccessor.GetStructAndUnbox(System.IntPtr,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Design.ParameterCollectionResolver.ObjectParameterCollectionAccessor.GetObject(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Design.ParameterCollectionResolver.ObjectParameterCollectionAccessor.SetObject(System.IntPtr,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Engine.Entity">
            <summary>
            Game entity. It usually aggregates multiple EntityComponent
            </summary>
        </member>
        <member name="M:Xenko.Engine.Entity.#ctor">
            <summary>
            Create a new <see cref="T:Xenko.Engine.Entity"/> instance.
            </summary>
        </member>
        <member name="M:Xenko.Engine.Entity.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Xenko.Engine.Entity"/> instance having the provided name.
            </summary>
            <param name="name">The name to give to the entity</param>
        </member>
        <member name="M:Xenko.Engine.Entity.#ctor(Xenko.Core.Mathematics.Vector3,System.String)">
            <summary>
            Create a new <see cref="T:Xenko.Engine.Entity" /> instance having the provided name and initial position.
            </summary>
            <param name="position">The initial position of the entity</param>
            <param name="name">The name to give to the entity</param>
        </member>
        <member name="M:Xenko.Engine.Entity.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new entity without any components (used for binary deserialization)
            </summary>
            <param name="name">Name of this component, might be null</param>
            <param name="notUsed">This parameter is not used</param>
        </member>
        <member name="P:Xenko.Engine.Entity.Scene">
            <summary>
            The parent scene.
            </summary>
        </member>
        <member name="P:Xenko.Engine.Entity.EntityManager">
            <summary>
            The entity manager which processes this entity.
            </summary>
        </member>
        <member name="P:Xenko.Engine.Entity.Transform">
            <summary>
            Gets or sets the <see cref="P:Xenko.Engine.Entity.Transform"/> associated to this entity.
            Added for convenience over usual Get/Set method.
            </summary>
        </member>
        <member name="P:Xenko.Engine.Entity.Components">
            <summary>
            The components stored in this entity.
            </summary>
        </member>
        <member name="M:Xenko.Engine.Entity.GetOrCreate``1">
            <summary>
            Gets or create a component with the specified key.
            </summary>
            <typeparam name="T">Type of the entity component</typeparam>
            <returns>A new or existing instance of {T}</returns>
        </member>
        <member name="M:Xenko.Engine.Entity.Add(Xenko.Engine.EntityComponent)">
            <summary>
            Adds the specified component using the <see cref="!:EntityComponent.DefaultKey" />.
            </summary>
            <param name="component">The component.</param>
            <exception cref="T:System.ArgumentNullException">component</exception>
        </member>
        <member name="M:Xenko.Engine.Entity.Get``1">
            <summary>
            Gets the first component of the specified type.
            </summary>
            <typeparam name="T">Type of the component</typeparam>
            <returns>The component or null if does no exist</returns>
        </member>
        <member name="M:Xenko.Engine.Entity.Get``1(System.Int32)">
            <summary>
            Gets the index'th component of the specified type. See remarks.
            </summary>
            <typeparam name="T">Type of the component</typeparam>
            <param name="index">The index'th component to select.</param>
            <returns>The component or null if does no exist</returns>
            <remarks>
            <ul>
            <li>If index &gt; 0, it will take the index'th component of the specified <typeparamref name="T"/>.</li>
            <li>An index == 0 is equivalent to calling <see cref="M:Xenko.Engine.Entity.Get``1"/></li>
            <li>if index &lt; 0, it will start from the end of the list to the beginning. A value of -1 means the first last component.</li>
            </ul>
            </remarks>
        </member>
        <member name="M:Xenko.Engine.Entity.GetAll``1">
            <summary>
            Gets all components of the specified type.
            </summary>
            <typeparam name="T">Type of the component</typeparam>
            <returns>The component or null if does no exist</returns>
        </member>
        <member name="M:Xenko.Engine.Entity.Remove``1">
            <summary>
            Removes the first component of the specified type or derived type.
            </summary>
            <typeparam name="T">Type of the component</typeparam>
        </member>
        <member name="M:Xenko.Engine.Entity.Remove(Xenko.Engine.EntityComponent)">
            <summary>
            Removes the specified component.
            </summary>
        </member>
        <member name="M:Xenko.Engine.Entity.RemoveAll``1">
            <summary>
            Removes all components of the specified type or derived type.
            </summary>
            <typeparam name="T">Type of the component</typeparam>
        </member>
        <member name="M:Xenko.Engine.Entity.GetEnumerator">
            <summary>
            Gets the enumerator of <see cref="T:Xenko.Engine.EntityComponent"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Xenko.Engine.Entity.EntityContentSerializer">
            <summary>
            Serializer which will not populate the new entity with a default transform
            </summary>
        </member>
        <member name="T:Xenko.Engine.Entity.EntityDebugView">
            <summary>
            Dedicated Debugger for an entity that displays children from Entity.Transform.Children
            </summary>
        </member>
        <member name="T:Xenko.Engine.Entity.EntitySerializer">
            <summary>
            Specialized serializer
            </summary>
            <seealso cref="T:Xenko.Engine.Entity" />
        </member>
        <member name="M:Xenko.Engine.Entity.EntitySerializer.Initialize(Xenko.Core.Serialization.SerializerSelector)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Engine.EntityComponent">
            <summary>
            Base class for <see cref="P:Xenko.Engine.EntityComponent.Entity"/> components.
            </summary>
        </member>
        <member name="P:Xenko.Engine.EntityComponent.Entity">
            <summary>
            Gets or sets the owner entity.
            </summary>
            <value>
            The owner entity.
            </value>
        </member>
        <member name="P:Xenko.Engine.EntityComponent.Id">
            <summary>
            The unique identifier of this component.
            </summary>
        </member>
        <member name="P:Xenko.Engine.EntityComponent.EnsureEntity">
            <summary>
            Gets the entity and throws an exception if the entity is null.
            </summary>
            <value>The entity.</value>
            <exception cref="T:System.InvalidOperationException">Entity on this instance is null</exception>
        </member>
        <member name="M:Xenko.Engine.EntityComponent.Serializer.Initialize(Xenko.Core.Serialization.SerializerSelector)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Engine.EntityComponentAttributeBase">
            <summary>
            Base class for attributes for <see cref="T:Xenko.Engine.EntityComponent"/>
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Xenko.Engine.EntityComponentAttributes">
            <summary>
            Allow to query attributes used on an <see cref="T:Xenko.Engine.EntityComponent"/>
            </summary>
        </member>
        <member name="F:Xenko.Engine.EntityComponentAttributes.AllowMultipleComponents">
            <summary>
            Gets a boolean indicating whether the <see cref="T:Xenko.Engine.EntityComponent"/> is supporting multiple components of the same type on an entity.
            </summary>
        </member>
        <member name="M:Xenko.Engine.EntityComponentAttributes.Get``1">
            <summary>
            Gets the attributes for the specified type.
            </summary>
            <typeparam name="T">Type of the component</typeparam>
            <returns>The attributes for the specified type.</returns>
        </member>
        <member name="M:Xenko.Engine.EntityComponentAttributes.Get(System.Type)">
            <summary>
            Gets the attributes for the specified type.
            </summary>
            <param name="type">The type of the component.</param>
            <returns>The attributes for the specified type.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">The type must be of EntityComponent;type</exception>
        </member>
        <member name="T:Xenko.Engine.EntityComponentCollection">
            <summary>
            A collection of <see cref="T:Xenko.Engine.EntityComponent"/> managed exclusively by the <see cref="T:Xenko.Engine.Entity"/>.
            </summary>
        </member>
        <member name="P:Xenko.Engine.EntityComponentCollection.AllowReplaceForeignEntity">
            <summary>
            This property is only used when merging
            </summary>
            <remarks>
            NOTE: This property set to true internally in some very rare case (merging)
            </remarks>
        </member>
        <member name="M:Xenko.Engine.EntityComponentCollection.Get``1">
            <summary>
            Gets the first component of the specified type or derived type.
            </summary>
            <typeparam name="T">Type of the component</typeparam>
            <returns>The first component or null if it was not found</returns>
        </member>
        <member name="M:Xenko.Engine.EntityComponentCollection.Get``1(System.Int32)">
            <summary>
            Gets the index'th component of the specified type or derived type.
            </summary>
            <typeparam name="T">Type of the component</typeparam>
            <param name="index">Index of the component of the same type</param>
            <returns>The component or null if it was not found</returns>
            <remarks>
            <ul>
            <li>If index &gt; 0, it will take the index'th component of the specified <typeparamref name="T"/>.</li>
            <li>An index == 0 is equivalent to calling <see cref="M:Xenko.Engine.EntityComponentCollection.Get``1"/></li>
            <li>if index &lt; 0, it will start from the end of the list to the beginning. A value of -1 means the first last component.</li>
            </ul>
            </remarks>
        </member>
        <member name="M:Xenko.Engine.EntityComponentCollection.Remove``1">
            <summary>
            Removes the first component of the specified type or derived type.
            </summary>
            <typeparam name="T">Type of the component</typeparam>
        </member>
        <member name="M:Xenko.Engine.EntityComponentCollection.RemoveAll``1">
            <summary>
            Removes all components of the specified type or derived type.
            </summary>
            <typeparam name="T">Type of the component</typeparam>
        </member>
        <member name="M:Xenko.Engine.EntityComponentCollection.GetAll``1">
            <summary>
            Gets all the components of the specified type or derived type.
            </summary>
            <typeparam name="T">Type of the component</typeparam>
            <returns>An iterator on the component matching the specified type</returns>
        </member>
        <member name="T:Xenko.Engine.EntityExtensions">
            <summary>
            Extensions for <see cref="T:Xenko.Engine.Entity"/>
            </summary>
        </member>
        <member name="M:Xenko.Engine.EntityExtensions.Clone(Xenko.Engine.Entity)">
            <summary>
            Deep clone of this entity.
            </summary>
            <param name="entity">The entity to clone</param>
            <returns>The cloned entity</returns>
        </member>
        <member name="M:Xenko.Engine.EntityExtensions.GetChildren(Xenko.Engine.Entity)">
            <summary>
            Gets the children of this entity.
            </summary>
            <param name="entity">The entity</param>
            <returns>An iteration on the child entity</returns>
        </member>
        <member name="M:Xenko.Engine.EntityExtensions.Enable``1(Xenko.Engine.Entity,System.Boolean,System.Boolean)">
            <summary>
            Enables or disables components of the specified type.
            </summary>
            <typeparam name="T">Type of the component</typeparam>
            <param name="entity">The entity to apply this method.</param>
            <param name="enabled">If set to <c>true</c>, all components of {T} will be enabled; otherwise they will be disabled</param>
            <param name="applyOnChildren">Recursively apply this method to the children of this entity</param>
        </member>
        <member name="M:Xenko.Engine.EntityExtensions.EnableAll(Xenko.Engine.Entity,System.Boolean,System.Boolean)">
            <summary>
            Enables or disables all <see cref="T:Xenko.Engine.ActivableEntityComponent"/>.
            </summary>
            <param name="entity">The entity to apply this method.</param>
            <param name="enabled">If set to <c>true</c>, all <see cref="T:Xenko.Engine.ActivableEntityComponent"/> will be enabled; otherwise they will be disabled</param>
            <param name="applyOnChildren">Recursively apply this method to the children of this entity</param>
        </member>
        <member name="T:Xenko.Engine.EntityManager">
            <summary>
            Manage a collection of entities.
            </summary>
        </member>
        <member name="E:Xenko.Engine.EntityManager.EntityAdded">
            <summary>
            Occurs when an entity is added.
            </summary>
        </member>
        <member name="E:Xenko.Engine.EntityManager.EntityRemoved">
            <summary>
            Occurs when an entity is removed.
            </summary>
        </member>
        <member name="E:Xenko.Engine.EntityManager.HierarchyChanged">
            <summary>
            Occurs when an entity is removed.
            </summary>
        </member>
        <member name="E:Xenko.Engine.EntityManager.ComponentTypeAdded">
            <summary>
            Occurs when a new component type is added.
            </summary>
        </member>
        <member name="E:Xenko.Engine.EntityManager.ComponentChanged">
            <summary>
            Occurs when a component changed for an entity (Added or removed)
            </summary>
        </member>
        <member name="M:Xenko.Engine.EntityManager.#ctor(Xenko.Core.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Engine.EntityManager"/> class.
            </summary>
            <param name="registry">The registry.</param>
            <exception cref="T:System.ArgumentNullException">registry</exception>
        </member>
        <member name="P:Xenko.Engine.EntityManager.Services">
            <summary>
            Gets the services.
            </summary>
            <value>The services.</value>
        </member>
        <member name="P:Xenko.Engine.EntityManager.Processors">
            <summary>
            Gets the entity Processors.
            </summary>
        </member>
        <member name="P:Xenko.Engine.EntityManager.ComponentTypes">
            <summary>
            Gets the list of component types from the entities..
            </summary>
            <value>The registered component types.</value>
        </member>
        <member name="M:Xenko.Engine.EntityManager.Contains(Xenko.Engine.Entity)">
            <summary>
            Determines whether this instance contains the specified entity.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if this instance contains the specified entity; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Xenko.Engine.EntityManager.GetEnumerator">
            <summary>
            Gets the <see cref="T:Xenko.Engine.Entity"/> enumerator of this instance.
            </summary>
            <returns>The entity enumerator</returns>
        </member>
        <member name="M:Xenko.Engine.EntityManager.GetProcessor``1">
            <summary>
            Gets the first processor of the type TProcessor.
            </summary>
            <typeparam name="TProcessor">Type of the processor</typeparam>
            <returns>The first processor of type T or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Xenko.Engine.EntityManager.Remove(Xenko.Engine.Entity)">
            <summary>
            Removes the entity from the <see cref="T:Xenko.Engine.EntityManager" />.
            It works weither entity has a parent or not.
            In conjonction with <see cref="!:HierarchicalProcessor" />, it will remove child entities as well.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Xenko.Engine.EntityManager.Reset">
            <summary>
            Removes all entities from the <see cref="T:Xenko.Engine.EntityManager"/>.
            </summary>
        </member>
        <member name="M:Xenko.Engine.EntityManager.Add(Xenko.Engine.Entity)">
            <summary>
            Adds the entity.
            If the <see cref="T:Xenko.Engine.Entity" /> has a parent, its parent should be added (or <see cref="P:Xenko.Engine.TransformComponent.Children" />) should be used.
            </summary>
            <param name="entity">The entity.</param>
            <exception cref="T:System.ArgumentException">Entity shouldn't have a parent.;entity</exception>
        </member>
        <member name="M:Xenko.Engine.EntityManager.InternalAddEntity(Xenko.Engine.Entity)">
            <summary>
            Adds the specified entity.
            </summary>
            <param name="entity">The entity to add.</param>
        </member>
        <member name="M:Xenko.Engine.EntityManager.InternalRemoveEntity(Xenko.Engine.Entity,System.Boolean)">
            <summary>
            Removes the specified entity.
            </summary>
            <param name="entity">The entity to remove.</param>
            <param name="removeParent">Indicate if entity should be removed from its parent</param>
        </member>
        <member name="T:Xenko.Engine.EntityManager.EntityProcessorCollectionPerComponentType">
            <summary>
            List of processors for a particular component type.
            </summary>
        </member>
        <member name="F:Xenko.Engine.EntityManager.EntityProcessorCollectionPerComponentType.Dependencies">
            <summary>
            The processors that are depending on the component type
            </summary>
        </member>
        <member name="T:Xenko.Engine.EntityProcessor">
            <summary>Entity processor, triggered on various <see cref="P:Xenko.Engine.EntityProcessor.EntityManager"/> events such as Entity and Component additions and removals.</summary>
        </member>
        <member name="F:Xenko.Engine.EntityProcessor.Tags">
            <summary>
            Tags associated to this entity processor
            </summary>
        </member>
        <member name="F:Xenko.Engine.EntityProcessor.UpdateProfilingState">
            <summary>
            Update Profiling state of this entity processor for the current frame.
            Pay attention this is a struct, use directly.
            Useful to add custom Mark events into processors
            </summary>
        </member>
        <member name="F:Xenko.Engine.EntityProcessor.DrawProfilingState">
            <summary>
            Draw Profiling state of this entity processor for the current frame.
            Pay attention this is a struct, use directly.
            Useful to add custom Mark events into processors
            </summary>
        </member>
        <member name="M:Xenko.Engine.EntityProcessor.#ctor(System.Type,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Engine.EntityProcessor"/> class.
            </summary>
            <param name="mainComponentType">Type of the main component.</param>
            <param name="additionalTypes">The additional types required by this processor.</param>
            <exception cref="T:System.ArgumentNullException">If parameteters are null</exception>
            <exception cref="T:System.ArgumentException">If a type does not inherit from EntityComponent</exception>
        </member>
        <member name="P:Xenko.Engine.EntityProcessor.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Xenko.Engine.EntityProcessor"/> is enabled.
            </summary>
        </member>
        <member name="P:Xenko.Engine.EntityProcessor.MainComponentType">
            <summary>
            Gets the primary component type handled by this processor
            </summary>
        </member>
        <member name="P:Xenko.Engine.EntityProcessor.RequiredTypes">
            <summary>
            Gets the required components for an entity to be added to this entity processor.
            </summary>
        </member>
        <member name="P:Xenko.Engine.EntityProcessor.HasRequiredComponents">
            <summary>
            Gets a value indicating whether this processor is requiring some components to be present in addition to the main component of <see cref="P:Xenko.Engine.EntityProcessor.MainComponentType"/>.
            </summary>
        </member>
        <member name="P:Xenko.Engine.EntityProcessor.Order">
            <summary>
            Gets or sets the order of this processor.
            </summary>
        </member>
        <member name="P:Xenko.Engine.EntityProcessor.EntityManager">
            <summary>
            Gets the current entity manager.
            </summary>
        </member>
        <member name="P:Xenko.Engine.EntityProcessor.Services">
            <summary>
            Gets the services.
            </summary>
        </member>
        <member name="M:Xenko.Engine.EntityProcessor.Update(Xenko.Games.GameTime)">
            <summary>
            Performs work related to this processor.
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Xenko.Engine.EntityProcessor.Draw(Xenko.Rendering.RenderContext)">
            <summary>
            Performs work related to this processor.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Xenko.Engine.EntityProcessor.OnSystemAdd">
            <summary>
            Run when this <see cref="T:Xenko.Engine.EntityProcessor" /> is added to an <see cref="P:Xenko.Engine.EntityProcessor.EntityManager" />.
            </summary>
        </member>
        <member name="M:Xenko.Engine.EntityProcessor.OnSystemRemove">
            <summary>
            Run when this <see cref="T:Xenko.Engine.EntityProcessor" /> is removed from an <see cref="P:Xenko.Engine.EntityProcessor.EntityManager" />.
            </summary>
        </member>
        <member name="M:Xenko.Engine.EntityProcessor.RemoveAllEntities">
            <summary>
            Should be called prior removal, it will unregister all entities.
            </summary>
        </member>
        <member name="M:Xenko.Engine.EntityProcessor.ProcessEntityComponent(Xenko.Engine.Entity,Xenko.Engine.EntityComponent,System.Boolean)">
            <summary>
            Checks if <see cref="T:Xenko.Engine.Entity"/> needs to be either added or removed.
            </summary>
            <param name="entity">The entity.</param>
            <param name="entityComponent"></param>
            <param name="forceRemove"></param>
        </member>
        <member name="M:Xenko.Engine.EntityProcessor.InternalAddEntity(Xenko.Engine.Entity)">
            <summary>
            Adds the entity to the internal list of the <see cref="P:Xenko.Engine.EntityProcessor.EntityManager"/>.
            Exposed for inheriting class that has no access to SceneInstance as internal.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Xenko.Engine.EntityProcessor.InternalRemoveEntity(Xenko.Engine.Entity,System.Boolean)">
            <summary>
            Removes the entity to the internal list of the <see cref="P:Xenko.Engine.EntityProcessor.EntityManager"/>.
            Exposed for inheriting class that has no access to SceneInstance as internal.
            </summary>
            <param name="entity">The entity.</param>
            <param name="removeParent">Indicate if entity should be removed from its parent</param>
        </member>
        <member name="M:Xenko.Engine.EntityProcessor.Accept(System.Reflection.TypeInfo)">
            <summary>
            Checks if this processor is primarily working on the passed Entity component type.
            </summary>
            <param name="type">Type of the EntityComponent</param>
            <returns><c>true</c> if this processor is accepting the component type</returns>
        </member>
        <member name="T:Xenko.Engine.EntityProcessor`2">
            <summary>
            Helper class for <see cref="T:Xenko.Engine.EntityProcessor" />, that will keep track of <see cref="T:Xenko.Engine.Entity" /> matching certain <see cref="T:Xenko.Engine.EntityComponent" /> requirements.
            </summary>
            <typeparam name="TComponent">The main type of the component this processor is looking for.</typeparam>
            <typeparam name="TData">The type of the associated data.</typeparam>
            <remarks>
            Additional precomputed data will be stored alongside the <see cref="T:Xenko.Engine.Entity" /> to offer faster accesses and iterations.
            </remarks>
        </member>
        <member name="M:Xenko.Engine.EntityProcessor`2.OnSystemAdd">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.EntityProcessor`2.OnSystemRemove">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.EntityProcessor`2.RemoveAllEntities">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.EntityProcessor`2.ProcessEntityComponent(Xenko.Engine.Entity,Xenko.Engine.EntityComponent,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.EntityProcessor`2.GenerateComponentData(Xenko.Engine.Entity,`0)">
            <summary>Generates associated data to the given entity.</summary>
            Called right before <see cref="M:Xenko.Engine.EntityProcessor`2.OnEntityComponentAdding(Xenko.Engine.Entity,`0,`1)"/>.
            <param name="entity">The entity.</param>
            <param name="component"></param>
            <returns>The associated data.</returns>
        </member>
        <member name="M:Xenko.Engine.EntityProcessor`2.IsAssociatedDataValid(Xenko.Engine.Entity,`0,`1)">
            <summary>Checks if the current associated data is valid, or if readding the entity is required.</summary>
            <param name="entity">The entity.</param>
            <param name="component"></param>
            <param name="associatedData">The associated data.</param>
            <returns>True if the change in associated data requires the entity to be readded, false otherwise.</returns>
        </member>
        <member name="M:Xenko.Engine.EntityProcessor`2.OnEntityComponentAdding(Xenko.Engine.Entity,`0,`1)">
            <summary>Run when a matching entity is added to this entity processor.</summary>
            <param name="entity">The entity.</param>
            <param name="component"></param>
            <param name="data">  The associated data.</param>
        </member>
        <member name="M:Xenko.Engine.EntityProcessor`2.OnEntityComponentRemoved(Xenko.Engine.Entity,`0,`1)">
            <summary>Run when a matching entity is removed from this entity processor.</summary>
            <param name="entity">The entity.</param>
            <param name="component"></param>
            <param name="data">  The associated data.</param>
        </member>
        <member name="T:Xenko.Engine.EntityProcessor`1">
            <summary>
            Base implementation of <see cref="T:Xenko.Engine.EntityProcessor`2"/> when the TComponent and TData are the same
            </summary>
            <typeparam name="TComponent">The main type of the component this processor is looking for.</typeparam>
        </member>
        <member name="M:Xenko.Engine.EntityProcessor`1.GenerateComponentData(Xenko.Engine.Entity,`0)">
            <inheritdoc />
        </member>
        <member name="M:Xenko.Engine.EntityProcessor`1.IsAssociatedDataValid(Xenko.Engine.Entity,`0,`0)">
            <inheritdoc />
        </member>
        <member name="T:Xenko.Engine.EntityProcessorCollection">
            <summary>
            Ordered collection of <see cref="T:Xenko.Engine.EntityProcessor"/> based on the <see cref="P:Xenko.Engine.EntityProcessor.Order"/> property.
            </summary>
            <seealso cref="!:Xenko.Core.Collections.OrderedCollection&lt;Xenko.Engine.EntityProcessor&gt;" />
        </member>
        <member name="M:Xenko.Engine.EntityProcessorCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Engine.EntityProcessorCollection"/> class.
            </summary>
        </member>
        <member name="M:Xenko.Engine.EntityProcessorCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Engine.EntityProcessorCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Xenko.Engine.EntityProcessorCollection.Get``1">
            <summary>
            Gets the first processor of the type T.
            </summary>
            <typeparam name="T">Type of the processor</typeparam>
            <returns>The first processor of type T or <c>null</c> if not found.</returns>
        </member>
        <member name="T:Xenko.Engine.EntityProcessorCollection.EntityProcessorComparer">
            <summary>
            Internal comparer for <see cref="T:Xenko.Engine.EntityProcessor"/>
            </summary>
        </member>
        <member name="T:Xenko.Engine.EntityTransformExtensions">
            <summary>
            Extensions for <see cref="T:Xenko.Engine.Entity"/> and the <see cref="T:Xenko.Engine.TransformComponent"/>.
            </summary>
        </member>
        <member name="M:Xenko.Engine.EntityTransformExtensions.AddChild(Xenko.Engine.Entity,Xenko.Engine.Entity)">
            <summary>
            Adds a child Entity to the transform component of a parent Entity.
            </summary>
            <param name="parentEntity">The parent Entity.</param>
            <param name="childEntity">The child parent Entity.</param>
            <exception cref="T:System.NullReferenceException"><paramref name="childEntity"/> is <c>null</c></exception>
            <exception cref="T:System.NullReferenceException"><paramref name="parentEntity"/> is <c>null</c></exception>
        </member>
        <member name="M:Xenko.Engine.EntityTransformExtensions.RemoveChild(Xenko.Engine.Entity,Xenko.Engine.Entity)">
            <summary>
            Removes a child Entity to the transform component of a parent Entity. Note that the child entity is still in the <see cref="T:Xenko.Engine.SceneInstance"/>.
            In order to remove it from the scene instance, you should call <see cref="M:Xenko.Engine.SceneInstance.Remove(Xenko.Engine.Scene)"/>
            </summary>
            <param name="parentEntity">The parent Entity.</param>
            <param name="childEntity">The child Entity.</param>
            <exception cref="T:System.NullReferenceException"><paramref name="childEntity"/> is <c>null</c></exception>
            <exception cref="T:System.NullReferenceException"><paramref name="parentEntity"/> is <c>null</c></exception>
        </member>
        <member name="M:Xenko.Engine.EntityTransformExtensions.RemoveChild(Xenko.Engine.Entity,System.Guid)">
            <summary>
            Removes a child entity from the transform component of a parent Entity.
            </summary>
            <param name="parentEntity">The parent entity.</param>
            <param name="childId">The child id of the child entity.</param>
            <exception cref="T:System.NullReferenceException"><paramref name="parentEntity"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException"><paramref name="childId"/> is <see cref="F:System.Guid.Empty"/></exception>
        </member>
        <member name="M:Xenko.Engine.EntityTransformExtensions.GetChild(Xenko.Engine.Entity,System.Int32)">
            <summary>
            Get the nth child of an Entity as stored in its <see cref="T:Xenko.Engine.TransformComponent"/>.
            </summary>
            <param name="parentEntity">The parent Entity.</param>
            <param name="index">The child index.</param>
            <exception cref="T:System.NullReferenceException"><paramref name="parentEntity"/> is <c>null</c></exception>
        </member>
        <member name="M:Xenko.Engine.EntityTransformExtensions.GetParent(Xenko.Engine.Entity)">
            <summary>
            Returns the parent of this <see cref="T:Xenko.Engine.Entity"/> as stored in its <see cref="T:Xenko.Engine.TransformComponent"/>, or null if it has no parent.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The parent entity, or null if it has no parent.</returns>
            <exception cref="T:System.NullReferenceException"><paramref name="entity"/> is <c>null</c></exception>
        </member>
        <member name="M:Xenko.Engine.EntityTransformExtensions.FindChild(Xenko.Engine.Entity,System.String)">
            <summary>
            Returns the first child in the hierarchy with the provided name.
            This function can be slow, do not use every frame!
            </summary>
            <param name="parentEntity">The parent Entity.</param>
            <param name="childName">The name of the child to look for.</param>
            <returns>Null or the first child with the requested name.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="parentEntity"/> is <c>null</c></exception>
        </member>
        <member name="M:Xenko.Engine.EntityTransformExtensions.FindRoot(Xenko.Engine.Entity)">
            <summary>
            Returns the root of this <see cref="T:Xenko.Engine.Entity"/>, or itself if it has no parent.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The root entity, or itself if it has no parent.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="entity"/> is <c>null</c></exception>
        </member>
        <member name="M:Xenko.Engine.EntityTransformExtensions.GetWorldTransformation(Xenko.Engine.TransformComponent,Xenko.Core.Mathematics.Vector3@,Xenko.Core.Mathematics.Quaternion@,Xenko.Core.Mathematics.Vector3@)">
            <summary>
            Gets absolute world space position, rotation and scale of the given transform.
            </summary>
            <param name="transformComponent">The transform component.</param>
            <param name="position">Output world space position.</param>
            <param name="rotation">Output world space rotation.</param>
            <param name="scale">Output world space scale.</param>
        </member>
        <member name="M:Xenko.Engine.EntityTransformExtensions.WorldToLocal(Xenko.Engine.TransformComponent,Xenko.Core.Mathematics.Vector3@,Xenko.Core.Mathematics.Quaternion@,Xenko.Core.Mathematics.Vector3@)">
            <summary>
            Performs tranformation of the given transform in world space to local space.
            </summary>
            <param name="transformComponent">The transform component.</param>
            <param name="position">Input world space position tranformed to local space.</param>
            <param name="rotation">Input world space rotation tranformed to local space.</param>
            <param name="scale">Input world space scale tranformed to local space.</param>
        </member>
        <member name="M:Xenko.Engine.EntityTransformExtensions.WorldToLocal(Xenko.Engine.TransformComponent,Xenko.Core.Mathematics.Vector3@,Xenko.Core.Mathematics.Vector3@)">
            <summary>
            Performs tranformation of the given point in world space to local space.
            </summary>
            <param name="transformComponent">The transform component.</param>
            <param name="point">World space point.</param>
            <param name="result">Local space point.</param>
        </member>
        <member name="M:Xenko.Engine.EntityTransformExtensions.WorldToLocal(Xenko.Engine.TransformComponent,Xenko.Core.Mathematics.Vector3)">
            <summary>
            Performs tranformation of the given point in world space to local space.
            </summary>
            <param name="transformComponent">The transform component.</param>
            <param name="point">World space point.</param>
            <returns>Local space point.</returns>
        </member>
        <member name="M:Xenko.Engine.EntityTransformExtensions.LocalToWorld(Xenko.Engine.TransformComponent,Xenko.Core.Mathematics.Vector3@,Xenko.Core.Mathematics.Quaternion@,Xenko.Core.Mathematics.Vector3@)">
            <summary>
            Performs tranformation of the given transform in local space to world space.
            </summary>
            <param name="transformComponent">The transform component.</param>
            <param name="position">Input local space position tranformed to world space.</param>
            <param name="rotation">Input local space rotation tranformed to world space.</param>
            <param name="scale">Input local space scale tranformed to world space.</param>
        </member>
        <member name="M:Xenko.Engine.EntityTransformExtensions.LocalToWorld(Xenko.Engine.TransformComponent,Xenko.Core.Mathematics.Vector3@,Xenko.Core.Mathematics.Vector3@)">
            <summary>
            Performs tranformation of the given point in local space to world space.
            </summary>
            <param name="transformComponent">The transform component.</param>
            <param name="point">Local space point.</param>
            <param name="result">World space point.</param>
        </member>
        <member name="M:Xenko.Engine.EntityTransformExtensions.LocalToWorld(Xenko.Engine.TransformComponent,Xenko.Core.Mathematics.Vector3)">
            <summary>
            Performs tranformation of the given point in local space to world space.
            </summary>
            <param name="transformComponent">The transform component.</param>
            <param name="point">Local space point.</param>
            <returns>World space point.</returns>
        </member>
        <member name="T:Xenko.Engine.Events.EventKeyCounter">
            <summary>
            Used mostly for debug, to identify events
            </summary>
        </member>
        <member name="M:Xenko.Engine.Events.EventKey`1.Broadcast(`0)">
            <summary>
            Broadcasts the event to all the receivers
            </summary>
        </member>
        <member name="T:Xenko.Engine.Events.EventKey">
            <summary>
            Creates a new EventKey used to broadcast events.
            </summary>
        </member>
        <member name="M:Xenko.Engine.Events.EventKey.Broadcast">
            <summary>
            Broadcasts the event to all the receivers
            </summary>
        </member>
        <member name="T:Xenko.Engine.Events.EventKeyBase`1">
            <summary>
            Creates a new EventKey used to broadcast T type events.
            </summary>
            <typeparam name="T">The data type of the event you wish to send</typeparam>
        </member>
        <member name="T:Xenko.Engine.Events.EventData">
            <summary>
            When using EventReceiver.ReceiveOne, this structure is used to contain the received data
            </summary>
        </member>
        <member name="T:Xenko.Engine.Events.EventReceiver`1">
            <summary>
            Creates an event receiver that is used to receive T type events from an EventKey
            </summary>
            <typeparam name="T">The type of data the EventKey will send</typeparam>
        </member>
        <member name="M:Xenko.Engine.Events.EventReceiver`1.#ctor(Xenko.Engine.Events.EventKey{`0},Xenko.Engine.Events.EventReceiverOptions)">
            <summary>
            Creates an event receiver, ready to receive broadcasts from the key
            </summary>
            <param name="key">The event key to listen from</param>
            <param name="options">Option flags</param>
        </member>
        <member name="M:Xenko.Engine.Events.EventReceiver`1.ReceiveAsync">
            <summary>
            Awaits a single event
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xenko.Engine.Events.EventReceiver`1.TryReceive(`0@)">
            <summary>
            Receives one event from the buffer, useful specially in Sync scripts
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xenko.Engine.Events.EventReceiver`1.TryReceiveAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Receives all the events from the queue (if buffered was true during creations), useful mostly only in Sync scripts
            </summary>
            <returns></returns>
        </member>
        <member name="T:Xenko.Engine.Events.EventReceiver">
            <summary>
            Creates an event receiver that is used to receive events from an EventKey
            </summary>
        </member>
        <member name="M:Xenko.Engine.Events.EventReceiver.#ctor(Xenko.Engine.Events.EventKey,Xenko.Engine.Events.EventReceiverOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Engine.Events.EventReceiver"/> class.
            Creates an event receiver, ready to receive broadcasts from the key.
            </summary>
            <param name="key">The event key to listen from</param>
            <param name="options">Option flags</param>
        </member>
        <member name="M:Xenko.Engine.Events.EventReceiver.ReceiveAsync">
            <summary>
            Awaits a single event
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xenko.Engine.Events.EventReceiver.TryReceive">
            <summary>
            Receives one event from the buffer, useful specially in Sync scripts
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xenko.Engine.Events.EventReceiver.TryReceiveAll">
            <summary>
            Receives all the events from the queue (if buffered was true during creations), useful mostly only in Sync scripts
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xenko.Engine.Events.EventReceiver.ReceiveOne(Xenko.Engine.Events.EventReceiverBase[])">
            <summary>
            Combines multiple receivers in one call and tries to receive the first available events among all the passed receivers
            </summary>
            <param name="events">The events you want to listen to</param>
            <returns></returns>
        </member>
        <member name="T:Xenko.Engine.Events.EventReceiverBase">
            <summary>
            Base class for EventReceivers
            </summary>
        </member>
        <member name="T:Xenko.Engine.Events.EventReceiverBase`1">
            <summary>
            Base type for EventReceiver.
            </summary>
            <typeparam name="T">The type of data the EventKey will send</typeparam>
        </member>
        <member name="P:Xenko.Engine.Events.EventReceiverBase`1.Count">
            <summary>
            Returns the count of currently buffered events
            </summary>
        </member>
        <member name="M:Xenko.Engine.Events.EventReceiverBase`1.Reset">
            <summary>
            Clears all currently buffered events.
            </summary>
        </member>
        <member name="T:Xenko.Engine.Events.EventReceiverOptions">
            <summary>
            Options related to EventReceiver
            might be extended in the future
            </summary>
        </member>
        <member name="F:Xenko.Engine.Events.EventReceiverOptions.None">
            <summary>
            If no flags are present only the most recent event will be buffered
            </summary>
        </member>
        <member name="F:Xenko.Engine.Events.EventReceiverOptions.Buffered">
            <summary>
            If this flag is present the events will be buffered into a queue,
            receivers might decide to consume at any pace they wish as long as they consume them at some point
            </summary>
        </member>
        <member name="T:Xenko.Engine.Events.EventTaskScheduler">
            <summary>
            Simple passthru scheduler to avoid the default dataflow TaskScheduler.Default usage
            This also makes sure we fire events at proper required order/timing
            </summary>
        </member>
        <member name="T:Xenko.Engine.Game">
            <summary>
            Main Game class system.
            </summary>
        </member>
        <member name="E:Xenko.Engine.Game.GameStarted">
            <summary>
            Static event that will be fired when a game is initialized
            </summary>
        </member>
        <member name="E:Xenko.Engine.Game.GameDestroyed">
            <summary>
            Static event that will be fired when a game is destroyed
            </summary>
        </member>
        <member name="P:Xenko.Engine.Game.Settings">
            <summary>
            Readonly game settings as defined in the GameSettings asset
            Please note that it will be populated during initialization
            It will be ok to read them after the GameStarted event or after initialization
            </summary>
        </member>
        <member name="P:Xenko.Engine.Game.GraphicsDeviceManager">
            <summary>
            Gets the graphics device manager.
            </summary>
            <value>The graphics device manager.</value>
        </member>
        <member name="P:Xenko.Engine.Game.Script">
            <summary>
            Gets the script system.
            </summary>
            <value>The script.</value>
        </member>
        <member name="P:Xenko.Engine.Game.Input">
            <summary>
            Gets the input manager.
            </summary>
            <value>The input.</value>
        </member>
        <member name="P:Xenko.Engine.Game.SceneSystem">
            <summary>
            Gets the scene system.
            </summary>
            <value>The scene system.</value>
        </member>
        <member name="P:Xenko.Engine.Game.EffectSystem">
            <summary>
            Gets the effect system.
            </summary>
            <value>The effect system.</value>
        </member>
        <member name="P:Xenko.Engine.Game.Streaming">
            <summary>
            Gets the streaming system.
            </summary>
            <value>The streaming system.</value>
        </member>
        <member name="P:Xenko.Engine.Game.Audio">
            <summary>
            Gets the audio system.
            </summary>
            <value>The audio.</value>
        </member>
        <member name="P:Xenko.Engine.Game.SpriteAnimation">
            <summary>
            Gets the sprite animation system.
            </summary>
            <value>The sprite animation system.</value>
        </member>
        <member name="P:Xenko.Engine.Game.DebugTextSystem">
            <summary>
            Gets the game profiler system.
            </summary>
        </member>
        <member name="P:Xenko.Engine.Game.ProfilingSystem">
            <summary>
            Gets the game profiler system.
            </summary>
        </member>
        <member name="P:Xenko.Engine.Game.VRDeviceSystem">
            <summary>
            Gets the VR Device System.
            </summary>
        </member>
        <member name="P:Xenko.Engine.Game.Font">
            <summary>
            Gets the font system.
            </summary>
            <value>The font system.</value>
            <exception cref="T:System.InvalidOperationException">The font system is not initialized yet</exception>
        </member>
        <member name="P:Xenko.Engine.Game.ConsoleLogMode">
            <summary>
            Gets or sets the console log mode. See remarks.
            </summary>
            <value>The console log mode.</value>
            <remarks>
            Defines how the console will be displayed when running the game. By default, on Windows, It will open only on debug
            if there are any messages logged.
            </remarks>
        </member>
        <member name="P:Xenko.Engine.Game.ConsoleLogLevel">
            <summary>
            Gets or sets the default console log level.
            </summary>
            <value>The console log level.</value>
        </member>
        <member name="P:Xenko.Engine.Game.AutoLoadDefaultSettings">
            <summary>
            Automatically initializes game settings like default scene, resolution, graphics profile.
            </summary>
        </member>
        <member name="M:Xenko.Engine.Game.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Engine.Game"/> class.
            </summary>
        </member>
        <member name="M:Xenko.Engine.Game.Destroy">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Game.PrepareContext">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Game.LoadContent">
            <summary>
            Loads the content.
            </summary>
        </member>
        <member name="P:Xenko.Engine.GameSystem.Game">
            <summary>
            Gets the <see cref="P:Xenko.Engine.GameSystem.Game"/> associated with this <see cref="T:Xenko.Games.GameSystemBase"/>. This value can be null in a mock environment.
            </summary>
            <value>The game.</value>
            <remarks>This value can be null</remarks>
        </member>
        <member name="P:Xenko.Engine.ISceneRendererContext.Services">
            <summary>
            The service registry.
            </summary>
        </member>
        <member name="P:Xenko.Engine.ISceneRendererContext.GameSystems">
            <summary>
            The list of game systems.
            </summary>
        </member>
        <member name="P:Xenko.Engine.ISceneRendererContext.SceneSystem">
            <summary>
            The current scene system.
            </summary>
        </member>
        <member name="P:Xenko.Engine.ISceneRendererContext.GraphicsDevice">
            <summary>
            The graphics device.
            </summary>
        </member>
        <member name="P:Xenko.Engine.ISceneRendererContext.GraphicsContext">
            <summary>
            The graphics context used during draw.
            </summary>
        </member>
        <member name="P:Xenko.Engine.ISceneRendererContext.Content">
            <summary>
             The content manager to load content.
            </summary>
        </member>
        <member name="T:Xenko.Engine.LightComponent">
            <summary>
            Add a light to an <see cref="T:Xenko.Engine.Entity"/>, that will be used during rendering.
            </summary>
        </member>
        <member name="M:Xenko.Engine.LightComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Engine.LightComponent"/> class.
            </summary>
        </member>
        <member name="P:Xenko.Engine.LightComponent.Type">
            <summary>
            Gets or sets the type of the light.
            </summary>
            <value>The type of the light.</value>
            <userdoc>The type of the light</userdoc>
        </member>
        <member name="P:Xenko.Engine.LightComponent.Intensity">
            <summary>
            Gets or sets the light intensity.
            </summary>
            <value>The light intensity.</value>
            <userdoc>The intensity of the light.</userdoc>
        </member>
        <member name="T:Xenko.Engine.LightComponentExtensions">
            <summary>
            Extensions for the <see cref="T:Xenko.Engine.LightComponent"/> class.
            </summary>
        </member>
        <member name="M:Xenko.Engine.LightComponentExtensions.GetColor(Xenko.Engine.LightComponent)">
            <summary>
            Gets the color from a <see cref="T:Xenko.Engine.LightComponent"/> assuming that the <see cref="P:Xenko.Engine.LightComponent.Type"/> is an instance of <see cref="T:Xenko.Rendering.Lights.IColorLight"/> 
            </summary>
            <param name="light">The light component.</param>
            <returns>The color of the light component</returns>
            <exception cref="T:System.InvalidOperationException">If the LightComponent doesn't contain a color light type IColorLight</exception>
        </member>
        <member name="M:Xenko.Engine.LightComponentExtensions.SetColor(Xenko.Engine.LightComponent,Xenko.Core.Mathematics.Color3)">
            <summary>
            Sets the color from a <see cref="T:Xenko.Engine.LightComponent"/> assuming that the <see cref="P:Xenko.Engine.LightComponent.Type"/> is an instance of <see cref="T:Xenko.Rendering.Lights.IColorLight"/> 
            </summary>
            <param name="light">The light component.</param>
            <param name="color">The light color.</param>
            <exception cref="T:System.InvalidOperationException">If the LightComponent doesn't contain a color light type IColorLight</exception>
        </member>
        <member name="T:Xenko.Engine.LightShaftBoundingVolumeComponent">
            <summary>
            A bounding volume for light shafts to be rendered in, can take any <see cref="P:Xenko.Engine.LightShaftBoundingVolumeComponent.Model"/> as a volume
            </summary>
        </member>
        <member name="P:Xenko.Engine.LightShaftBoundingVolumeComponent.Model">
            <summary>
            The model used to define the bounding volume
            </summary>
        </member>
        <member name="P:Xenko.Engine.LightShaftBoundingVolumeComponent.LightShaft">
            <summary>
            The light shaft to which the bounding volume applies
            </summary>
        </member>
        <member name="T:Xenko.Engine.LightShaftComponent">
            <summary>
            The source for light shafts, should be placed on the same entity as the light component which will be used for light shafts
            </summary>
        </member>
        <member name="P:Xenko.Engine.LightShaftComponent.DensityFactor">
            <summary>
            Density of the light shaft fog
            </summary>
            <userdoc>
            Higher values produce brighter light shafts
            </userdoc>
        </member>
        <member name="P:Xenko.Engine.LightShaftComponent.SampleCount">
            <summary>
            Number of samples taken per pixel
            </summary>
            <userdoc>
            Higher sample counts produce better light shafts but use more GPU
            </userdoc>
        </member>
        <member name="P:Xenko.Engine.LightShaftComponent.SeparateBoundingVolumes">
            <summary>
            If true, all bounding volumes will be drawn one by one.
            </summary>
            <remarks>
            If this is off, the light shafts might be lower in quality if the bounding volumes overlap (in the same pixel). 
            If this is on, and the bounding volumes overlap (in space), the light shafts inside the overlapping area will become twice as bright.
            </remarks>
            <userdoc>
            This preserves light shaft quality when seen through separate bounding boxes, but uses more GPU
            </userdoc>
        </member>
        <member name="T:Xenko.Engine.ModelComponent">
            <summary>
            Add a <see cref="P:Xenko.Engine.ModelComponent.Model"/> to an <see cref="T:Xenko.Engine.Entity"/>, that will be used during rendering.
            </summary>
        </member>
        <member name="T:Xenko.Engine.ModelComponent.MeshInfo">
            <summary>
            Per-entity state of each individual mesh of a model.
            </summary>
        </member>
        <member name="F:Xenko.Engine.ModelComponent.MeshInfo.BlendMatrices">
            <summary>
            The current blend matrices of a skinned meshes, transforming from mesh space to world space, for each bone.
            </summary>
        </member>
        <member name="F:Xenko.Engine.ModelComponent.MeshInfo.BoundingBox">
            <summary>
            The meshes current bounding box in world space.
            </summary>
        </member>
        <member name="F:Xenko.Engine.ModelComponent.MeshInfo.BoundingSphere">
            <summary>
            The meshes current sphere box in world space.
            </summary>
        </member>
        <member name="M:Xenko.Engine.ModelComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Engine.ModelComponent"/> class.
            </summary>
        </member>
        <member name="M:Xenko.Engine.ModelComponent.#ctor(Xenko.Rendering.Model)">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Engine.ModelComponent"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="P:Xenko.Engine.ModelComponent.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>
            The model.
            </value>
            <userdoc>The reference to the model asset to attach to this entity</userdoc>
        </member>
        <member name="P:Xenko.Engine.ModelComponent.Materials">
            <summary>
            Gets the materials; non-null ones will override materials from <see cref="P:Xenko.Rendering.Model.Materials"/> (same slots should be used).
            </summary>
            <value>
            The materials overriding <see cref="P:Xenko.Rendering.Model.Materials"/> ones.
            </value>
            <userdoc>The list of materials to use with the model. This list overrides the default materials of the model.</userdoc>
        </member>
        <member name="P:Xenko.Engine.ModelComponent.MeshInfos">
            <summary>
            Gets the current per-entity state for each mesh in the associated model.
            </summary>
        </member>
        <member name="P:Xenko.Engine.ModelComponent.IsShadowCaster">
            <summary>
            Gets or sets a boolean indicating if this model component is casting shadows.
            </summary>
            <value>A boolean indicating if this model component is casting shadows.</value>
            <userdoc>Generate a shadow (when shadow maps are enabled)</userdoc>
        </member>
        <member name="P:Xenko.Engine.ModelComponent.RenderGroup">
            <summary>
            The render group for this component.
            </summary>
        </member>
        <member name="F:Xenko.Engine.ModelComponent.BoundingBox">
            <summary>
            Gets the bounding box in world space.
            </summary>
            <value>The bounding box.</value>
        </member>
        <member name="F:Xenko.Engine.ModelComponent.BoundingSphere">
            <summary>
            Gets the bounding sphere in world space.
            </summary>
            <value>The bounding sphere.</value>
        </member>
        <member name="M:Xenko.Engine.ModelComponent.GetMaterial(System.Int32)">
            <summary>
            Gets the material at the specified index. If the material is not overriden by this component, it will try to get it from <see cref="P:Xenko.Rendering.Model.Materials"/>
            </summary>
            <param name="index">The index of the material</param>
            <returns>The material at the specified index or null if not found</returns>
        </member>
        <member name="M:Xenko.Engine.ModelComponent.GetMaterialCount">
            <summary>
            Gets the number of materials (computed from <see cref="P:Xenko.Rendering.Model.Materials"/>)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Xenko.Engine.ModelNodeLinkComponent.Target">
            <summary>
            Gets or sets the model which contains the hierarchy to use.
            </summary>
            <value>
            The model which contains the hierarchy to use.
            </value>
            <userdoc>The model that contains the skeleton to attach this entity to. If null, the entity attaches to the parent. 
            Note: Xenko does not support as target entities that themself linked to another bone.</userdoc>
        </member>
        <member name="P:Xenko.Engine.ModelNodeLinkComponent.NodeName">
            <summary>
            Gets or sets the name of the node.
            </summary>
            <value>
            The name of the node.
            </value>
            <userdoc>The bone/joint to attach this entity to.</userdoc>
        </member>
        <member name="M:Xenko.Engine.ModelNodeTransformLink.ComputeMatrix(System.Boolean,Xenko.Core.Mathematics.Matrix@)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Engine.ModelViewHierarchyTransformOperation">
            <summary>
            Updates <see cref="P:Xenko.Engine.ModelComponent.Skeleton"/>.
            </summary>
        </member>
        <member name="M:Xenko.Engine.ModelViewHierarchyTransformOperation.Process(Xenko.Engine.TransformComponent)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Engine.Network.ClientRouterMessage">
            <summary>
            Message exchanged between client and router.
            Note: shouldn't collide with <see cref="!:RouterMessage"/>.
            </summary>
        </member>
        <member name="T:Xenko.Engine.Network.ExceptionMessage">
            <summary>
            In the case of a SocketMessage when we use it in a SendReceiveAsync we want to propagate exceptions from the remote host
            </summary>
        </member>
        <member name="F:Xenko.Engine.Network.ExceptionMessage.ExceptionInfo">
            <summary>
            Remote exception information
            </summary>
        </member>
        <member name="F:Xenko.Engine.Network.RouterClient.DefaultPort">
            <summary>
            The default port to connect to router server.
            </summary>
        </member>
        <member name="F:Xenko.Engine.Network.RouterClient.DefaultListenPort">
            <summary>
            The default port to listen for connection from router.
            </summary>
        </member>
        <member name="M:Xenko.Engine.Network.RouterClient.RegisterService">
            <summary>
            Starts a service.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Xenko.Engine.Network.RouterClient.RequestServer(System.String,System.Threading.CancellationToken)">
            <summary>
            Requests a specific server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xenko.Engine.Network.RouterClient.InitiateConnectionToRouter">
            <summary>
            Initiates a connection to the router.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Xenko.Engine.Network.RouterClient.ConnectionMode">
            <summary>
            Gets a value indicating whether this platform initiates connections by listening on a port and wait for router (true) or connecting to router (false).
            </summary>
        </member>
        <member name="F:Xenko.Engine.Network.RouterClient.RouterConnectionMode.Connect">
            <summary>
            Tries to connect to the router.
            </summary>
        </member>
        <member name="F:Xenko.Engine.Network.RouterClient.RouterConnectionMode.Listen">
            <summary>
            Tries to listen from a router connection.
            </summary>
        </member>
        <member name="F:Xenko.Engine.Network.RouterClient.RouterConnectionMode.ConnectThenListen">
            <summary>
            First, tries to connect, and if not possible, listen for a router connection.
            This is useful for platform where we can't be sure (no way to determine if emulator and/or run in desktop or remotely, such as UWP).
            </summary>
        </member>
        <member name="T:Xenko.Engine.Network.SimpleSocket">
            <summary>
            Manages socket connection+ack and low-level communication.
            High-level communication is supposed to happen in <see cref="T:Xenko.Engine.Network.SocketMessageLayer"/>.
            </summary>
        </member>
        <member name="P:Xenko.Engine.Network.SimpleSocket.Socket">
            <summary>
            Gets the underlying <see cref="T:Sockets.Plugin.TcpSocketClient"/> object.
            </summary>
        </member>
        <member name="M:Xenko.Engine.Network.SimpleSocket.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Engine.Network.SimpleSocketException">
            <summary>
            Used when there is a socket exception.
            </summary>
        </member>
        <member name="F:Xenko.Engine.Network.SocketMessage.StreamId">
            <summary>
            An ID that will identify the message, in order to answer to it.
            </summary>
        </member>
        <member name="T:Xenko.Engine.Network.SocketMessageLayer">
            <summary>
            High-level layer that can be used on top of <see cref="T:Xenko.Engine.Network.SimpleSocket"/> to send and receive objects using serialization.
            </summary>
        </member>
        <member name="T:Xenko.Engine.Prefab">
            <summary>
            A prefab that contains entities.
            </summary>
        </member>
        <member name="P:Xenko.Engine.Prefab.Entities">
            <summary>
            The entities.
            </summary>
        </member>
        <member name="M:Xenko.Engine.Prefab.Instantiate">
            <summary>
            Instantiates entities from a prefab that can be later added to a <see cref="T:Xenko.Engine.Scene"/>.
            </summary>
            <returns>A collection of entities extracted from the prefab</returns>
        </member>
        <member name="T:Xenko.Engine.Processors.BackgroundComponentProcessor">
            <summary>
            The processor in charge of updating and drawing the entities having background components.
            </summary>
        </member>
        <member name="M:Xenko.Engine.Processors.BackgroundComponentProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Engine.Processors.BackgroundComponentProcessor"/> class.
            </summary>
        </member>
        <member name="T:Xenko.Engine.Processors.CameraProcessor">
            <summary>
            The processor for <see cref="T:Xenko.Engine.CameraComponent"/>.
            </summary>
        </member>
        <member name="M:Xenko.Engine.Processors.CameraProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Engine.Processors.CameraProcessor"/> class.
            </summary>
        </member>
        <member name="T:Xenko.Engine.Processors.CameraProjectionMode">
            <summary>
            Projection of a <see cref="T:Xenko.Engine.CameraComponent"/>.
            </summary>
        </member>
        <member name="F:Xenko.Engine.Processors.CameraProjectionMode.Perspective">
            <summary>
            A perspective projection.
            </summary>
            <userdoc>A perspective projection (usually used for 3D games).</userdoc>
        </member>
        <member name="F:Xenko.Engine.Processors.CameraProjectionMode.Orthographic">
            <summary>
            An orthographic projection.
            </summary>
            <userdoc>An orthographic projection (usually used for 2D games).</userdoc>
        </member>
        <member name="P:Xenko.Engine.Processors.LightShaftProcessor.VisibilityGroup">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Processors.LightShaftProcessor.GenerateComponentData(Xenko.Engine.Entity,Xenko.Engine.LightShaftComponent)">
            <inheritdoc />
        </member>
        <member name="M:Xenko.Engine.Processors.LightShaftProcessor.IsAssociatedDataValid(Xenko.Engine.Entity,Xenko.Engine.LightShaftComponent,Xenko.Engine.Processors.LightShaftProcessor.AssociatedData)">
            <inheritdoc />
        </member>
        <member name="M:Xenko.Engine.Processors.LightShaftProcessor.Update(Xenko.Games.GameTime)">
            <inheritdoc />
        </member>
        <member name="T:Xenko.Engine.Processors.ModelTransformProcessor">
            <summary>
            The processor for <see cref="T:Xenko.Engine.ModelComponent"/>.
            </summary>
        </member>
        <member name="M:Xenko.Engine.Processors.ModelTransformProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Engine.Processors.ModelTransformProcessor"/> class.
            </summary>
        </member>
        <member name="T:Xenko.Engine.Processors.ScriptProcessor">
            <summary>
            Manage scripts
            </summary>
        </member>
        <member name="M:Xenko.Engine.Processors.ScriptProcessor.OnEntityComponentAdding(Xenko.Engine.Entity,Xenko.Engine.ScriptComponent,Xenko.Engine.ScriptComponent)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Processors.ScriptProcessor.OnEntityComponentRemoved(Xenko.Engine.Entity,Xenko.Engine.ScriptComponent,Xenko.Engine.ScriptComponent)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Engine.Processors.ScriptSystem">
            <summary>
            The script system handles scripts scheduling in a game.
            </summary>
        </member>
        <member name="F:Xenko.Engine.Processors.ScriptSystem.registeredScripts">
            <summary>
            Contains all currently executed scripts
            </summary>
        </member>
        <member name="P:Xenko.Engine.Processors.ScriptSystem.Scheduler">
            <summary>
            Gets the scheduler.
            </summary>
            <value>The scheduler.</value>
        </member>
        <member name="M:Xenko.Engine.Processors.ScriptSystem.#ctor(Xenko.Core.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Games.GameSystemBase" /> class.
            </summary>
            <param name="registry">The registry.</param>
            <remarks>The GameSystem is expecting the following services to be registered: <see cref="T:Xenko.Games.IGame" /> and <see cref="T:Xenko.Core.Serialization.Contents.ContentManager" />.</remarks>
        </member>
        <member name="M:Xenko.Engine.Processors.ScriptSystem.NextFrame">
            <summary>
            Allows to wait for next frame.
            </summary>
            <returns>ChannelMicroThreadAwaiter&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:Xenko.Engine.Processors.ScriptSystem.AddTask(System.Func{System.Threading.Tasks.Task},System.Int64)">
            <summary>
            Adds the specified micro thread function.
            </summary>
            <param name="microThreadFunction">The micro thread function.</param>
            <returns>MicroThread.</returns>
        </member>
        <member name="M:Xenko.Engine.Processors.ScriptSystem.WhenAll(Xenko.Core.MicroThreading.MicroThread[])">
            <summary>
            Waits all micro thread finished their task completion.
            </summary>
            <param name="microThreads">The micro threads.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Xenko.Engine.Processors.ScriptSystem.Add(Xenko.Engine.ScriptComponent)">
            <summary>
            Add the provided script to the script system.
            </summary>
            <param name="script">The script to add</param>
        </member>
        <member name="M:Xenko.Engine.Processors.ScriptSystem.Remove(Xenko.Engine.ScriptComponent)">
            <summary>
            Remove the provided script from the script system.
            </summary>
            <param name="script">The script to remove</param>
        </member>
        <member name="M:Xenko.Engine.Processors.ScriptSystem.LiveReload(Xenko.Engine.ScriptComponent,Xenko.Engine.ScriptComponent)">
            <summary>
            Called by a live scripting debugger to notify the ScriptSystem about reloaded scripts.
            </summary>
            <param name="oldScript">The old script</param>
            <param name="newScript">The new script</param>
        </member>
        <member name="T:Xenko.Engine.Processors.TransformProcessor">
            <summary>
            Handle <see cref="P:Xenko.Engine.TransformComponent.Children"/> and updates <see cref="F:Xenko.Engine.TransformComponent.WorldMatrix"/> of entities.
            </summary>
        </member>
        <member name="F:Xenko.Engine.Processors.TransformProcessor.TransformationRoots">
            <summary>
            List of root entities <see cref="T:Xenko.Engine.TransformComponent"/> of every <see cref="T:Xenko.Engine.Entity"/> in <see cref="T:Xenko.Engine.EntityManager"/>.
            </summary>
        </member>
        <member name="F:Xenko.Engine.Processors.TransformProcessor.notSpecialRootComponents">
            <summary>
            The list of the components that are not special roots.
            </summary>
            <remarks>This field is instantiated here to avoid reallocation at each frames</remarks>
        </member>
        <member name="M:Xenko.Engine.Processors.TransformProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Engine.Processors.TransformProcessor" /> class.
            </summary>
        </member>
        <member name="M:Xenko.Engine.Processors.TransformProcessor.OnSystemAdd">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Processors.TransformProcessor.OnSystemRemove">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Processors.TransformProcessor.OnEntityComponentAdding(Xenko.Engine.Entity,Xenko.Engine.TransformComponent,Xenko.Engine.TransformComponent)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Processors.TransformProcessor.OnEntityComponentRemoved(Xenko.Engine.Entity,Xenko.Engine.TransformComponent,Xenko.Engine.TransformComponent)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Processors.TransformProcessor.Draw(Xenko.Rendering.RenderContext)">
            <summary>
            Updates all the <see cref="F:Xenko.Engine.TransformComponent.WorldMatrix"/>.
            </summary>
            <param name="context">The render context.</param>
        </member>
        <member name="T:Xenko.Engine.RequireComponentAttribute">
            <summary>
            Allows to declare that a component requires another component in order to run (used for <see cref="T:Xenko.Engine.ScriptComponent"/>
            </summary>
        </member>
        <member name="M:Xenko.Engine.RequireComponentAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:Xenko.Engine.RequireComponentAttribute"/>.
            </summary>
            <param name="type">Type of the required <see cref="T:Xenko.Engine.EntityComponent"/></param>
        </member>
        <member name="P:Xenko.Engine.RequireComponentAttribute.Type">
            <summary>
            Gets the type of the required component (Must be an <see cref="T:Xenko.Engine.EntityComponent"/>.
            </summary>
        </member>
        <member name="T:Xenko.Engine.Scene">
            <summary>
            A scene.
            </summary>
        </member>
        <member name="M:Xenko.Engine.Scene.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Engine.Scene"/> class.
            </summary>
        </member>
        <member name="P:Xenko.Engine.Scene.Parent">
            <summary>
            The parent scene.
            </summary>
        </member>
        <member name="P:Xenko.Engine.Scene.Entities">
            <summary>
            The entities.
            </summary>
        </member>
        <member name="P:Xenko.Engine.Scene.Children">
            <summary>
            The child scenes.
            </summary>
        </member>
        <member name="F:Xenko.Engine.Scene.Offset">
            <summary>
            An offset applied to all entities of the scene relative to it's parent scene.
            </summary>
        </member>
        <member name="F:Xenko.Engine.Scene.WorldMatrix">
            <summary>
            The absolute transform applied to all entities of the scene.
            </summary>
            <remarks>This field is overwritten by the transform processor each frame.</remarks>
        </member>
        <member name="M:Xenko.Engine.Scene.UpdateWorldMatrix">
            <summary>
            Updates the world transform of the scene.
            </summary>
        </member>
        <member name="M:Xenko.Engine.Scene.EntityCollection.InsertItem(System.Int32,Xenko.Engine.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Scene.EntityCollection.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Scene.SceneCollection.InsertItem(System.Int32,Xenko.Engine.Scene)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.Scene.SceneCollection.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Engine.SceneInstance">
            <summary>
            Manage a collection of entities within a <see cref="P:Xenko.Engine.SceneInstance.RootScene"/>.
            </summary>
        </member>
        <member name="F:Xenko.Engine.SceneInstance.Current">
            <summary>
            A property key to get the current scene from the <see cref="!:RenderContext.Tags"/>.
            </summary>
        </member>
        <member name="F:Xenko.Engine.SceneInstance.CurrentRenderSystem">
            <summary>
            A property key to get the current render system from the <see cref="!:RenderContext.Tags"/>.
            </summary>
        </member>
        <member name="F:Xenko.Engine.SceneInstance.CurrentVisibilityGroup">
            <summary>
            A property key to get the current visibility group from the <see cref="!:RenderContext.Tags"/>.
            </summary>
        </member>
        <member name="E:Xenko.Engine.SceneInstance.RootSceneChanged">
            <summary>
            Occurs when the scene changed from a scene child component.
            </summary>
        </member>
        <member name="M:Xenko.Engine.SceneInstance.#ctor(Xenko.Core.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Engine.EntityManager" /> class.
            </summary>
            <param name="registry">The registry.</param>
        </member>
        <member name="M:Xenko.Engine.SceneInstance.#ctor(Xenko.Core.IServiceRegistry,Xenko.Engine.Scene,Xenko.Engine.Design.ExecutionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Engine.SceneInstance" /> class.
            </summary>
            <param name="services">The services.</param>
            <param name="rootScene">The scene entity root.</param>
            <param name="executionMode">The mode that determines which processors are executed.</param>
            <exception cref="T:System.ArgumentNullException">services
            or
            rootScene</exception>
        </member>
        <member name="P:Xenko.Engine.SceneInstance.RootScene">
            <summary>
            Gets the scene.
            </summary>
            <value>The scene.</value>
        </member>
        <member name="M:Xenko.Engine.SceneInstance.GetCurrent(Xenko.Rendering.RenderContext)">
            <summary>
            Gets the current scene valid only from a rendering context. May be null.
            </summary>
            <param name="context">The context.</param>
            <returns>Xenko.Engine.SceneInstance.</returns>
        </member>
        <member name="T:Xenko.Engine.SceneSystem">
            <summary>
            The scene system handles the scenes of a game.
            </summary>
        </member>
        <member name="M:Xenko.Engine.SceneSystem.#ctor(Xenko.Core.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Games.GameSystemBase" /> class.
            </summary>
            <param name="registry">The registry.</param>
            <remarks>The GameSystem is expecting the following services to be registered: <see cref="T:Xenko.Games.IGame" /> and <see cref="T:Xenko.Core.Serialization.Contents.IContentManager" />.</remarks>
        </member>
        <member name="P:Xenko.Engine.SceneSystem.SceneInstance">
            <summary>
            Gets or sets the root scene.
            </summary>
            <value>The scene</value>
            <exception cref="T:System.ArgumentNullException">Scene cannot be null</exception>
        </member>
        <member name="P:Xenko.Engine.SceneSystem.InitialSceneUrl">
            <summary>
            URL of the scene loaded at initialization.
            </summary>
        </member>
        <member name="P:Xenko.Engine.SceneSystem.InitialGraphicsCompositorUrl">
            <summary>
            URL of the graphics compositor loaded at initialization.
            </summary>
        </member>
        <member name="P:Xenko.Engine.SceneSystem.SplashScreenUrl">
            <summary>
            URL of the splash screen texture loaded at initialization.
            </summary>
        </member>
        <member name="P:Xenko.Engine.SceneSystem.SplashScreenColor">
            <summary>
            Splash screen background color.
            </summary>
        </member>
        <member name="P:Xenko.Engine.SceneSystem.DoubleViewSplashScreen">
            <summary>
            Is the splash screen displayed in VR double view.
            </summary>
        </member>
        <member name="P:Xenko.Engine.SceneSystem.SplashScreenEnabled">
            <summary>
            If splash screen rendering is enabled, true if a splash screen texture is present, and only in release builds
            </summary>
        </member>
        <member name="T:Xenko.Engine.ScriptComponent">
            <summary>
            Script component.
            </summary>
        </member>
        <member name="F:Xenko.Engine.ScriptComponent.ScriptGlobalProfilingKey">
            <summary>
            The global profiling key for scripts. Activate/deactivate this key to activate/deactivate profiling for all your scripts.
            </summary>
        </member>
        <member name="P:Xenko.Engine.ScriptComponent.ProfilingKey">
            <summary>
            Gets the profiling key to activate/deactivate profiling for the current script class.
            </summary>
        </member>
        <member name="P:Xenko.Engine.ScriptComponent.Streaming">
            <summary>
            Gets the streaming system.
            </summary>
            <value>The streaming system.</value>
        </member>
        <member name="P:Xenko.Engine.ScriptComponent.Priority">
            <summary>
            The priority this script will be scheduled with (compared to other scripts).
            </summary>
            <userdoc>The execution priority for this script. It applies to async, sync and startup scripts. Lower values mean earlier execution.</userdoc>
        </member>
        <member name="P:Xenko.Engine.ScriptComponent.IsLiveReloading">
            <summary>
            Determines whether the script is currently undergoing live reloading.
            </summary>
        </member>
        <member name="P:Xenko.Engine.ScriptComponent.Collector">
            <summary>
            The object collector associated with this script.
            </summary>
        </member>
        <member name="M:Xenko.Engine.ScriptComponent.PriorityUpdated">
            <summary>
            Internal helper function called when <see cref="P:Xenko.Engine.ScriptComponent.Priority"/> is changed.
            </summary>
        </member>
        <member name="M:Xenko.Engine.ScriptComponent.Cancel">
            <summary>
            Called when the script's update loop is canceled.
            </summary>
        </member>
        <member name="T:Xenko.Engine.SpriteComponent">
            <summary>
            Add a <see cref="T:Xenko.Graphics.Sprite"/> to an <see cref="T:Xenko.Engine.Entity"/>. It could be an animated sprite.
            </summary>
        </member>
        <member name="P:Xenko.Engine.SpriteComponent.SpriteProvider">
            <summary>
            The group of sprites associated to the component.
            </summary>
            <userdoc>The source of the sprite data.</userdoc>
        </member>
        <member name="F:Xenko.Engine.SpriteComponent.SpriteType">
            <summary>
            The type of the sprite.
            </summary>
            <userdoc>The type of the sprite. A 3D sprite in the scene or billboard perpendicular to camera view.</userdoc>
        </member>
        <member name="P:Xenko.Engine.SpriteComponent.Color">
            <summary>
            The color shade to apply on the sprite.
            </summary>
            <userdoc>The color to apply to the sprite.</userdoc>
        </member>
        <member name="P:Xenko.Engine.SpriteComponent.Intensity">
            <summary>
            The intensity by which the color is scaled.
            </summary>
            <userdoc>
            The intensity by which the color is scaled. Mainly used for rendering LDR sprites in in HDR scenes.
            </userdoc>
        </member>
        <member name="P:Xenko.Engine.SpriteComponent.PremultipliedAlpha">
            <summary>
            Gets or sets a value indicating whether the sprite is a pre-multiplied alpha (default is true).
            </summary>
            <value><c>true</c> if the texture is pre-multiplied by alpha; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Xenko.Engine.SpriteComponent.IgnoreDepth">
            <summary>
            Ignore the depth of other elements of the scene when rendering the sprite by disabling the depth test.
            </summary>
            <userdoc>Ignore the depth of other elements of the scene when rendering the sprite. When checked, the sprite is always put on top of previous elements.</userdoc>
        </member>
        <member name="F:Xenko.Engine.SpriteComponent.IsAlphaCutoff">
            <summary>
            Discard pixels with low alpha value when rendering the sprite by performing alpha cut off test.
            </summary>
            <userdoc>Ignore pixels with low alpha value when rendering the sprite by performing alpha cut off test.</userdoc>
        </member>
        <member name="P:Xenko.Engine.SpriteComponent.BlendMode">
            <summary>
            Discard pixels with low alpha value when rendering the sprite by performing alpha cut off test.
            </summary>
            <userdoc>Ignore pixels with low alpha value when rendering the sprite by performing alpha cut off test.</userdoc>
        </member>
        <member name="P:Xenko.Engine.SpriteComponent.Sampler">
            <summary>
            Specifies the texture sampling method to be used for this sprite
            </summary>
            <userdoc>
            Specifies the texture sampling method to be used for this sprite
            </userdoc>
        </member>
        <member name="P:Xenko.Engine.SpriteComponent.Swizzle">
            <summary>
            Specifies the swizzle method for sampling (how to access and mix the color channels)
            </summary>
            <userdoc>
            Specifies the swizzle method for sampling (how to access and mix the color channels)
            </userdoc>
        </member>
        <member name="P:Xenko.Engine.SpriteComponent.RenderGroup">
            <summary>
            The render group for this component.
            </summary>
        </member>
        <member name="M:Xenko.Engine.SpriteComponent.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Xenko.Engine.SpriteComponent"/>
            </summary>
        </member>
        <member name="P:Xenko.Engine.SpriteComponent.CurrentFrame">
            <summary>
            Gets the current frame of the animation.
            </summary>
        </member>
        <member name="P:Xenko.Engine.SpriteComponent.CurrentSprite">
            <summary>
            Gets the current sprite.
            </summary>
        </member>
        <member name="M:Xenko.Engine.StartupScript.Start">
            <summary>
            Called before the script enters it's update loop.
            </summary>
        </member>
        <member name="T:Xenko.Engine.SyncScript">
            <summary>
            A script whose <see cref="M:Xenko.Engine.SyncScript.Update"/> will be called every frame.
            </summary>
        </member>
        <member name="M:Xenko.Engine.SyncScript.Update">
            <summary>
            Called every frame.
            </summary>
        </member>
        <member name="T:Xenko.Engine.TransformComponent">
            <summary>
            Defines Position, Rotation and Scale of its <see cref="T:Xenko.Engine.Entity"/>.
            </summary>
        </member>
        <member name="F:Xenko.Engine.TransformComponent.PostOperations">
            <summary>
            This is where we can register some custom work to be done after world matrix has been computed, such as updating model node hierarchy or physics for local node.
            </summary>
        </member>
        <member name="F:Xenko.Engine.TransformComponent.WorldMatrix">
            <summary>
            The world matrix.
            Its value is automatically recomputed at each frame from the local and the parent matrices.
            One can use <see cref="M:Xenko.Engine.TransformComponent.UpdateWorldMatrix"/> to force the update to happen before next frame.
            </summary>
            <remarks>The setter should not be used and is accessible only for performance purposes.</remarks>
        </member>
        <member name="F:Xenko.Engine.TransformComponent.LocalMatrix">
            <summary>
            The local matrix.
            Its value is automatically recomputed at each frame from the position, rotation and scale.
            One can use <see cref="M:Xenko.Engine.TransformComponent.UpdateLocalMatrix"/> to force the update to happen before next frame.
            </summary>
            <remarks>The setter should not be used and is accessible only for performance purposes.</remarks>
        </member>
        <member name="F:Xenko.Engine.TransformComponent.Position">
            <summary>
            The translation relative to the parent transformation.
            </summary>
            <userdoc>The translation of the entity with regard to its parent</userdoc>
        </member>
        <member name="F:Xenko.Engine.TransformComponent.Rotation">
            <summary>
            The rotation relative to the parent transformation.
            </summary>
            <userdoc>The rotation of the entity with regard to its parent</userdoc>
        </member>
        <member name="F:Xenko.Engine.TransformComponent.Scale">
            <summary>
            The scaling relative to the parent transformation.
            </summary>
            <userdoc>The scale of the entity with regard to its parent</userdoc>
        </member>
        <member name="M:Xenko.Engine.TransformComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Engine.TransformComponent" /> class.
            </summary>
        </member>
        <member name="P:Xenko.Engine.TransformComponent.UseTRS">
            <summary>
            Gets or sets a value indicating whether to use the Translation/Rotation/Scale.
            </summary>
            <value><c>true</c> if [use TRS]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Xenko.Engine.TransformComponent.Children">
            <summary>
            Gets the children of this <see cref="T:Xenko.Engine.TransformComponent"/>.
            </summary>
        </member>
        <member name="P:Xenko.Engine.TransformComponent.RotationEulerXYZ">
            <summary>
            Gets or sets the euler rotation, with XYZ order.
            Not stable: setting value and getting it again might return different value as it is internally encoded as a <see cref="T:Xenko.Core.Mathematics.Quaternion"/> in <see cref="F:Xenko.Engine.TransformComponent.Rotation"/>.
            </summary>
            <value>
            The euler rotation.
            </value>
        </member>
        <member name="P:Xenko.Engine.TransformComponent.Parent">
            <summary>
            Gets or sets the parent of this <see cref="T:Xenko.Engine.TransformComponent"/>.
            </summary>
            <value>
            The parent.
            </value>
        </member>
        <member name="M:Xenko.Engine.TransformComponent.UpdateLocalMatrix">
            <summary>
            Updates the local matrix.
            If <see cref="P:Xenko.Engine.TransformComponent.UseTRS"/> is true, <see cref="F:Xenko.Engine.TransformComponent.LocalMatrix"/> will be updated from <see cref="F:Xenko.Engine.TransformComponent.Position"/>, <see cref="F:Xenko.Engine.TransformComponent.Rotation"/> and <see cref="F:Xenko.Engine.TransformComponent.Scale"/>.
            </summary>
        </member>
        <member name="M:Xenko.Engine.TransformComponent.UpdateLocalFromWorld">
            <summary>
            Updates the local matrix based on the world matrix and the parent entity's or containing scene's world matrix.
            </summary>
        </member>
        <member name="M:Xenko.Engine.TransformComponent.UpdateWorldMatrix">
            <summary>
            Updates the world matrix.
            It will first call <see cref="M:Xenko.Engine.TransformComponent.UpdateLocalMatrix"/> on self, and <see cref="M:Xenko.Engine.TransformComponent.UpdateWorldMatrix"/> on <see cref="P:Xenko.Engine.TransformComponent.Parent"/> if not null.
            Then <see cref="F:Xenko.Engine.TransformComponent.WorldMatrix"/> will be updated by multiplying <see cref="F:Xenko.Engine.TransformComponent.LocalMatrix"/> and parent <see cref="F:Xenko.Engine.TransformComponent.WorldMatrix"/> (if any).
            </summary>
        </member>
        <member name="M:Xenko.Engine.TransformComponent.TransformChildrenCollection.InsertItem(System.Int32,Xenko.Engine.TransformComponent)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.TransformComponent.TransformChildrenCollection.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.TransformComponent.TransformChildrenCollection.ClearItems">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Engine.TransformComponent.TransformChildrenCollection.SetItem(System.Int32,Xenko.Engine.TransformComponent)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Engine.TransformLink">
            <summary>
            Gives the ability to control how parent matrix is computed in a <see cref="T:Xenko.Engine.TransformComponent"/>.
            </summary>
        </member>
        <member name="M:Xenko.Engine.TransformLink.ComputeMatrix(System.Boolean,Xenko.Core.Mathematics.Matrix@)">
            <summary>
            Compute a world matrix this link represents.
            </summary>
            <param name="recursive"></param>
            <param name="matrix">The computed world matrix.</param>
        </member>
        <member name="T:Xenko.Engine.TransformOperation">
            <summary>
            Performs some work after world matrix has been updated.
            </summary>
        </member>
        <member name="M:Xenko.Internals.LambdaReadOnlyCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Internals.LambdaReadOnlyCollection`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Xenko.Internals.LambdaReadOnlyCollection`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xenko.Internals.LambdaReadOnlyCollection`2.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Profiling.DebugTextSystem.Print(System.String,Xenko.Core.Mathematics.Int2)">
            <summary>
            Print a custom overlay message
            </summary>
            <param name="message"></param>
            <param name="position"></param>
        </member>
        <member name="M:Xenko.Profiling.DebugTextSystem.Print(System.String,Xenko.Core.Mathematics.Int2,Xenko.Core.Mathematics.Color4)">
            <summary>
            Print a custom overlay message
            </summary>
            <param name="message"></param>
            <param name="position"></param>
            <param name="color"></param>
        </member>
        <member name="P:Xenko.Profiling.DebugTextSystem.TextColor">
            <summary>
            Sets or gets the color to use when drawing the profiling system fonts.
            </summary>
        </member>
        <member name="P:Xenko.Profiling.DebugTextSystem.TailSize">
            <summary>
            Sets or gets the size of the messages queue, older messages will be discarded if the size is greater.
            </summary>
        </member>
        <member name="M:Xenko.Profiling.GameProfilingSystem.#ctor(Xenko.Core.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Profiling.GameProfilingSystem"/> class.
            </summary>
            <param name="registry">The service registry.</param>
        </member>
        <member name="M:Xenko.Profiling.GameProfilingSystem.Update(Xenko.Games.GameTime)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Profiling.GameProfilingSystem.Destroy">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Profiling.GameProfilingSystem.Draw(Xenko.Games.GameTime)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Profiling.GameProfilingSystem.EnableProfiling(System.Boolean,Xenko.Core.Diagnostics.ProfilingKey[])">
            <summary>
            Enables the profiling system drawing.
            </summary>
            <param name="excludeKeys">If true the keys specified after are excluded from rendering, if false they will be exclusively included.</param>
            <param name="keys">The keys to exclude or include.</param>
        </member>
        <member name="M:Xenko.Profiling.GameProfilingSystem.DisableProfiling">
            <summary>
            Disables the profiling system drawing.
            </summary>
        </member>
        <member name="P:Xenko.Profiling.GameProfilingSystem.TextColor">
            <summary>
            Sets or gets the color to use when drawing the profiling system fonts.
            </summary>
        </member>
        <member name="P:Xenko.Profiling.GameProfilingSystem.SortingMode">
            <summary>
            Sets or gets the way the printed information will be sorted.
            </summary>
        </member>
        <member name="P:Xenko.Profiling.GameProfilingSystem.FilteringMode">
            <summary>
            Sets or gets which data should be displayed on screen.
            </summary>
        </member>
        <member name="P:Xenko.Profiling.GameProfilingSystem.RefreshTime">
            <summary>
            Sets or gets the refreshing time of the profiling information in milliseconds.
            </summary>
        </member>
        <member name="P:Xenko.Profiling.GameProfilingSystem.CurrentResultPage">
            <summary>
            Sets or gets the profiling result page to display.
            </summary>
        </member>
        <member name="T:Xenko.Rendering.Background.BackgroundRenderProcessor">
            <summary>
            A default entity processor for <see cref="T:Xenko.Engine.BackgroundComponent"/>.
            </summary>
        </member>
        <member name="P:Xenko.Rendering.Background.BackgroundRenderProcessor.ActiveBackground">
            <summary>
            Gets the active background.
            </summary>
            <value>The active background.</value>
        </member>
        <member name="M:Xenko.Rendering.Background.BackgroundRenderProcessor.OnSystemRemove">
            <inheritdoc />
        </member>
        <member name="M:Xenko.Rendering.Background.BackgroundRenderProcessor.GenerateComponentData(Xenko.Engine.Entity,Xenko.Engine.BackgroundComponent)">
            <inheritdoc />
        </member>
        <member name="M:Xenko.Rendering.Background.BackgroundRenderProcessor.IsAssociatedDataValid(Xenko.Engine.Entity,Xenko.Engine.BackgroundComponent,Xenko.Rendering.Background.RenderBackground)">
            <inheritdoc />
        </member>
        <member name="M:Xenko.Rendering.Background.BackgroundRenderProcessor.Draw(Xenko.Rendering.RenderContext)">
            <inheritdoc />
        </member>
        <member name="F:Xenko.Rendering.CameraComponentRendererExtensions.Current">
            <summary>
            Property key to access the current collection of <see cref="T:Xenko.Engine.CameraComponent"/> from <see cref="!:RenderContext.Tags"/>.
            </summary>
        </member>
        <member name="T:Xenko.Rendering.Compositing.EditorTopLevelCompositor">
            <summary>
            Used by editor as top level compositor.
            </summary>
        </member>
        <member name="P:Xenko.Rendering.Compositing.EditorTopLevelCompositor.EnablePreviewGame">
            <summary>
            When true, <see cref="P:Xenko.Rendering.Compositing.EditorTopLevelCompositor.PreviewGame"/> will be used as compositor.
            </summary>
        </member>
        <member name="P:Xenko.Rendering.Compositing.EditorTopLevelCompositor.PreviewGame">
            <summary>
            Compositor for previewing game, used when <see cref="P:Xenko.Rendering.Compositing.EditorTopLevelCompositor.EnablePreviewGame"/> is true.
            </summary>
        </member>
        <member name="T:Xenko.Rendering.Compositing.ForwardRenderer">
            <summary>
            Renders your game. It should use current <see cref="P:Xenko.Rendering.RenderContext.RenderView"/> and <see cref="M:Xenko.Rendering.CameraComponentRendererExtensions.GetCurrentCamera(Xenko.Rendering.RenderContext)"/>.
            </summary>
        </member>
        <member name="P:Xenko.Rendering.Compositing.ForwardRenderer.LightProbes">
            <summary>
            Enable Light Probe.
            </summary>
        </member>
        <member name="P:Xenko.Rendering.Compositing.ForwardRenderer.OpaqueRenderStage">
            <summary>
            The main render stage for opaque geometry.
            </summary>
        </member>
        <member name="P:Xenko.Rendering.Compositing.ForwardRenderer.TransparentRenderStage">
            <summary>
            The transparent render stage for transparent geometry.
            </summary>
        </member>
        <member name="P:Xenko.Rendering.Compositing.ForwardRenderer.ShadowMapRenderStages">
            <summary>
            The shadow map render stages for shadow casters. No shadow rendering will happen if null.
            </summary>
        </member>
        <member name="P:Xenko.Rendering.Compositing.ForwardRenderer.GBufferRenderStage">
            <summary>
            The G-Buffer render stage to render depth buffer and possibly some other extra info to buffers (i.e. normals)
            </summary>
        </member>
        <member name="P:Xenko.Rendering.Compositing.ForwardRenderer.PostEffects">
            <summary>
            The post effects renderer.
            </summary>
        </member>
        <member name="P:Xenko.Rendering.Compositing.ForwardRenderer.LightShafts">
            <summary>
            Light shafts effect
            </summary>
        </member>
        <member name="P:Xenko.Rendering.Compositing.ForwardRenderer.VRSettings">
            <summary>
            Virtual Reality related settings
            </summary>
        </member>
        <member name="P:Xenko.Rendering.Compositing.ForwardRenderer.SubsurfaceScatteringBlurEffect">
            <summary>
            Separable subsurface scattering effect
            </summary>
        </member>
        <member name="P:Xenko.Rendering.Compositing.ForwardRenderer.MSAALevel">
            <summary>
            The level of multi-sampling
            </summary>
        </member>
        <member name="P:Xenko.Rendering.Compositing.ForwardRenderer.MSAAResolver">
            <summary>
            MSAA Resolver is used to resolve multi-sampled render targets into normal render targets
            </summary>
        </member>
        <member name="P:Xenko.Rendering.Compositing.ForwardRenderer.BindDepthAsResourceDuringTransparentRendering">
            <summary>
            If true, depth buffer generated during <see cref="P:Xenko.Rendering.Compositing.ForwardRenderer.OpaqueRenderStage"/> will be available as a shader resource named DepthBase.DepthStencil during <see cref="P:Xenko.Rendering.Compositing.ForwardRenderer.TransparentRenderStage"/>.
            </summary>
            <remarks>
            This is needed by some effects such as particles soft edges.
            
            On recent platforms that can bind depth buffer as read-only (<see cref="F:Xenko.Graphics.GraphicsDeviceFeatures.HasDepthAsReadOnlyRT"/>), depth buffer will be used as is. Otherwise, a copy will be generated.
            </remarks>
        </member>
        <member name="M:Xenko.Rendering.Compositing.ForwardRenderer.ResolveMSAA(Xenko.Rendering.RenderDrawContext)">
            <summary>
            Resolves the MSAA textures. Converts MSAA currentRenderTargets and currentDepthStencil into currentRenderTargetsNonMSAA and currentDepthStencilNonMSAA.
            </summary>
            <param name="drawContext">The draw context.</param>
        </member>
        <member name="M:Xenko.Rendering.Compositing.ForwardRenderer.PrepareRenderTargets(Xenko.Rendering.RenderDrawContext,Xenko.Core.Mathematics.Size2)">
            <summary>
            Prepares targets per frame, caching and handling MSAA etc.
            </summary>
            <param name="drawContext">The current draw context</param>
            <param name="renderTargetsSize">The render target size</param>
        </member>
        <member name="M:Xenko.Rendering.Compositing.ForwardRenderer.BakeLightProbes(Xenko.Rendering.RenderContext,Xenko.Rendering.RenderDrawContext)">
            <summary>
            Bake lightprobes into buffers compatible with <see cref="T:Xenko.Rendering.LightProbes.LightProbeRenderer"/>
            </summary>
            <param name="drawContext">The drawing context</param>
        </member>
        <member name="P:Xenko.Rendering.Compositing.GraphicsCompositor.RenderSystem">
            <summary>
            Gets the render system used with this graphics compositor.
            </summary>
        </member>
        <member name="P:Xenko.Rendering.Compositing.GraphicsCompositor.Cameras">
            <summary>
            Gets the cameras used by this composition.
            </summary>
            <value>The cameras.</value>
            <userdoc>The list of cameras used in the graphic pipeline</userdoc>
        </member>
        <member name="P:Xenko.Rendering.Compositing.GraphicsCompositor.RenderStages">
            <summary>
            The list of render stages.
            </summary>
        </member>
        <member name="P:Xenko.Rendering.Compositing.GraphicsCompositor.RenderFeatures">
            <summary>
            The list of render features.
            </summary>
        </member>
        <member name="P:Xenko.Rendering.Compositing.GraphicsCompositor.Game">
            <summary>
            The entry point for the game compositor.
            </summary>
        </member>
        <member name="P:Xenko.Rendering.Compositing.GraphicsCompositor.SingleView">
            <summary>
            The entry point for a compositor that can render a single view.
            </summary>
        </member>
        <member name="P:Xenko.Rendering.Compositing.GraphicsCompositor.Editor">
            <summary>
            The entry point for a compositor used by the scene editor.
            </summary>
        </member>
        <member name="M:Xenko.Rendering.Compositing.GraphicsCompositor.InitializeCore">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Rendering.Compositing.GraphicsCompositor.Destroy">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Rendering.Compositing.GraphicsCompositor.DrawCore(Xenko.Rendering.RenderDrawContext)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Rendering.Compositing.GraphicsCompositorHelper">
            <summary>
            Helper functions for creating <see cref="T:Xenko.Rendering.Compositing.GraphicsCompositor"/>.
            </summary>
        </member>
        <member name="M:Xenko.Rendering.Compositing.GraphicsCompositorHelper.CreateDefault(System.Boolean,System.String,Xenko.Engine.CameraComponent,System.Nullable{Xenko.Core.Mathematics.Color4},Xenko.Graphics.GraphicsProfile,Xenko.Rendering.RenderGroupMask)">
            <summary>
            Creates a typical graphics compositor programatically. It can render meshes, sprites and backgrounds.
            </summary>
        </member>
        <member name="T:Xenko.Rendering.Compositing.SceneCameraRenderer">
            <summary>
            Defines and sets a <see cref="T:Xenko.Rendering.RenderView"/> and set it up using <see cref="P:Xenko.Rendering.Compositing.SceneCameraRenderer.Camera"/> or current context camera.
            </summary>
            <remarks>
            Since it sets a view, it is usually not shareable for multiple rendering.
            </remarks>
        </member>
        <member name="P:Xenko.Rendering.Compositing.SceneCameraRenderer.Camera">
            <summary>
            Gets or sets the camera.
            </summary>
            <value>The camera.</value>
            <userdoc>The camera to use to render the scene.</userdoc>
        </member>
        <member name="M:Xenko.Rendering.Compositing.SceneCameraRenderer.ResolveCamera(Xenko.Rendering.RenderContext)">
            <summary>
            Resolves camera to the one contained in slot <see cref="P:Xenko.Rendering.Compositing.SceneCameraRenderer.Camera"/>.
            </summary>
        </member>
        <member name="T:Xenko.Rendering.Compositing.SceneCameraSlot">
            <summary>
            A camera slot used by contained in a <see cref="T:Xenko.Rendering.Compositing.SceneCameraSlotCollection"/> and referenceable by a <see cref="T:Xenko.Rendering.Compositing.SceneCameraSlotId"/>
            </summary>
        </member>
        <member name="M:Xenko.Rendering.Compositing.SceneCameraSlot.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Rendering.Compositing.SceneCameraSlot"/> class.
            </summary>
        </member>
        <member name="P:Xenko.Rendering.Compositing.SceneCameraSlot.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Xenko.Rendering.Compositing.SceneCameraSlot.ToSlotId">
            <summary>
            Generates a <see cref="T:Xenko.Rendering.Compositing.SceneCameraSlotId"/> corresponding to this slot.
            </summary>
            <returns>A new instance of <see cref="T:Xenko.Rendering.Compositing.SceneCameraSlotId"/>.</returns>
        </member>
        <member name="T:Xenko.Rendering.Compositing.SceneCameraSlotCollection">
            <summary>
            A collection of <see cref="T:Xenko.Engine.CameraComponent"/>.
            </summary>
        </member>
        <member name="F:Xenko.Rendering.Compositing.SceneCameraSlotCollection.Current">
            <summary>
            Property key to access the current collection of <see cref="T:Xenko.Engine.CameraComponent"/> from <see cref="!:RenderContext.Tags"/>.
            </summary>
        </member>
        <member name="T:Xenko.Rendering.Compositing.SceneCameraSlotId">
            <summary>
            Identifies a camera slotIndex in a scene composition.
            </summary>
        </member>
        <member name="F:Xenko.Rendering.Compositing.SceneCameraSlotId.Id">
            <summary>
            The Guid matching a <see cref="T:Xenko.Rendering.Compositing.SceneCameraSlot"/>.
            </summary>
        </member>
        <member name="F:Xenko.Rendering.Compositing.SceneCameraSlotId.AttachedCompositor">
            <summary>
            The <see cref="T:Xenko.Rendering.Compositing.GraphicsCompositor"/> on which the camera containing this <see cref="T:Xenko.Rendering.Compositing.SceneCameraSlotId"/> is currently attached.
            </summary>
        </member>
        <member name="M:Xenko.Rendering.Compositing.SceneCameraSlotId.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Rendering.Compositing.SceneCameraSlotId"/> class.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="P:Xenko.Rendering.Compositing.SceneCameraSlotId.IsEmpty">
            <summary>
            Gets whether this <see cref="T:Xenko.Rendering.Compositing.SceneCameraSlotId"/> is empty.
            </summary>
        </member>
        <member name="M:Xenko.Rendering.Compositing.SceneCameraSlotId.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Rendering.Compositing.SceneCameraSlotId.Equals(Xenko.Rendering.Compositing.SceneCameraSlotId)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Rendering.Compositing.SceneCameraSlotId.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Rendering.Compositing.SceneCameraSlotId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Rendering.Compositing.SceneCameraSlotId.op_Equality(Xenko.Rendering.Compositing.SceneCameraSlotId,Xenko.Rendering.Compositing.SceneCameraSlotId)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Rendering.Compositing.SceneCameraSlotId.op_Inequality(Xenko.Rendering.Compositing.SceneCameraSlotId,Xenko.Rendering.Compositing.SceneCameraSlotId)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Rendering.Compositing.SceneCameraSlotId.SceneCameraSlotIdDataSerializer.Serialize(Xenko.Rendering.Compositing.SceneCameraSlotId@,Xenko.Core.Serialization.ArchiveMode,Xenko.Core.Serialization.SerializationStream)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Rendering.Compositing.SceneExternalCameraRenderer">
            <summary>
            A camera renderer that can use an external camera not in the scene.
            </summary>
        </member>
        <member name="M:Xenko.Rendering.Compositing.SceneExternalCameraRenderer.ResolveCamera(Xenko.Rendering.RenderContext)">
            <summary>
            Resolves camera to <see cref="P:Xenko.Rendering.Compositing.SceneExternalCameraRenderer.ExternalCamera"/> rather than the default behavior.
            </summary>
        </member>
        <member name="P:Xenko.Rendering.Compositing.VRRendererSettings.CopyMirror">
            <summary>
            Specifies if VR rendering should be copied to the current render target.
            </summary>
            <userdoc>Copy VR rendering to the current render target. Leave disabled to have different rendering on desktop than VR headset.</userdoc>
        </member>
        <member name="T:Xenko.Rendering.IEntityComponentRenderProcessor">
            <summary>
            An <see cref="T:Xenko.Engine.EntityProcessor"/> dedicated for rendering.
            </summary>
            Note that it might be instantiated multiple times in a given <see cref="T:Xenko.Engine.SceneInstance"/>.
        </member>
        <member name="P:Xenko.Rendering.LightProbes.LightProbeProcessor.VisibilityGroup">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Rendering.LightProbes.LightProbeProcessor.UpdateLightProbePositions">
            <summary>
            Light probe runtime data is auto-computed when lightprobes are added/removed.  If you move them at runtime, please call this method.
            </summary>
            <remarks>
            This will also update coefficients.
            </remarks>
        </member>
        <member name="M:Xenko.Rendering.LightProbes.LightProbeProcessor.UpdateLightProbeCoefficients">
            <summary>
            Updates only the coefficients of the light probes (from <see cref="P:Xenko.Engine.LightProbeComponent.Coefficients"/> to <see cref="F:Xenko.Rendering.LightProbes.LightProbeRuntimeData.Coefficients"/>).
            </summary>
        </member>
        <member name="T:Xenko.Rendering.Lights.LightProcessor">
            <summary>
            Process <see cref="T:Xenko.Engine.LightComponent"/> stored in an <see cref="T:Xenko.Engine.EntityManager"/> by providing grouped lights per types/shadows.
            </summary>
        </member>
        <member name="F:Xenko.Rendering.Lights.LightProcessor.DefaultDirection">
            <summary>
            The default direction of a light vector is (x,y,z) = (0,0,-1)
            </summary>
        </member>
        <member name="M:Xenko.Rendering.Lights.LightProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Rendering.Lights.LightProcessor"/> class.
            </summary>
        </member>
        <member name="P:Xenko.Rendering.Lights.LightProcessor.VisibilityGroup">
            <inheritdoc/>
        </member>
        <member name="P:Xenko.Rendering.Lights.LightProcessor.Lights">
            <summary>
            Gets the active lights.
            </summary>
            <value>The lights.</value>
        </member>
        <member name="M:Xenko.Rendering.ModelRenderProcessor.OnSystemAdd">
            <inheritdoc />
        </member>
        <member name="M:Xenko.Rendering.ModelRenderProcessor.GenerateComponentData(Xenko.Engine.Entity,Xenko.Engine.ModelComponent)">
            <inheritdoc />
        </member>
        <member name="M:Xenko.Rendering.ModelRenderProcessor.IsAssociatedDataValid(Xenko.Engine.Entity,Xenko.Engine.ModelComponent,Xenko.Rendering.RenderModel)">
            <inheritdoc />
        </member>
        <member name="M:Xenko.Rendering.ModelRenderProcessor.OnEntityComponentRemoved(Xenko.Engine.Entity,Xenko.Engine.ModelComponent,Xenko.Rendering.RenderModel)">
            <inheritdoc />
        </member>
        <member name="M:Xenko.Rendering.ModelRenderProcessor.Draw(Xenko.Rendering.RenderContext)">
            <inheritdoc />
        </member>
        <member name="M:Xenko.Rendering.Skyboxes.CubemapRendererBase.Draw(Xenko.Core.Mathematics.Vector3,Xenko.Graphics.Texture)">
            <summary>
            Render scene from a given position to a cubemap.
            </summary>
            <param name="position"></param>
            <param name="cubeTexture"></param>
        </member>
        <member name="T:Xenko.Rendering.Sprites.SpriteAnimationSystem">
            <summary>
            A system in charge of animating the sprites 
            </summary>
        </member>
        <member name="P:Xenko.Rendering.Sprites.SpriteAnimationSystem.DefaultFramesPerSecond">
            <summary>
            Gets or sets the default sprite animation FPS (Default value = 30 FPS). 
            </summary>
        </member>
        <member name="M:Xenko.Rendering.Sprites.SpriteAnimationSystem.#ctor(Xenko.Core.IServiceRegistry)">
            <summary>
            Creates a new instance of <see cref="T:Xenko.Rendering.Sprites.SpriteAnimationSystem"/> and register it in the services.
            </summary>
            <param name="registry"></param>
        </member>
        <member name="M:Xenko.Rendering.Sprites.SpriteAnimationSystem.Play(Xenko.Engine.SpriteComponent,System.Int32,System.Int32,Xenko.Animations.AnimationRepeatMode,System.Single,System.Boolean)">
            <summary>
            Play the sprite animation starting at index <paramref name="startIndex"/> and ending at <paramref name="endIndex"/>.
            </summary>
            <param name="spriteComponent">The sprite component containing the animation</param>
            <param name="startIndex">The first index of the animation</param>
            <param name="endIndex">The last index of the animation</param>
            <param name="repeatMode">The value indicating how to loop the animation</param>
            <param name="framesPerSeconds">The animation speed in frames per second. 0 to use the sprite animation system default speed.</param>
            <param name="clearQueuedAnimations">Indicate if queued animation should be cleared</param>
        </member>
        <member name="M:Xenko.Rendering.Sprites.SpriteAnimationSystem.Play(Xenko.Engine.SpriteComponent,System.Int32[],Xenko.Animations.AnimationRepeatMode,System.Single,System.Boolean)">
            <summary>
            Play the sprite animation defined by the provided sequence of indices.
            </summary>
            <param name="spriteComponent">The sprite component containing the animation</param>
            <param name="indices">The sequence of indices defining the sprite animation</param>
            <param name="repeatMode">The value indicating how to loop the animation</param>
            <param name="framesPerSeconds">The animation speed in frames per second. 0 to use the sprite animation system default speed.</param>
            <param name="clearQueuedAnimations">Indicate if queued animation should be cleared</param>
        </member>
        <member name="M:Xenko.Rendering.Sprites.SpriteAnimationSystem.Queue(Xenko.Engine.SpriteComponent,System.Int32,System.Int32,Xenko.Animations.AnimationRepeatMode,System.Single)">
            <summary>
            Queue the sprite animation starting at index <paramref name="startIndex"/> and ending at <paramref name="endIndex"/> at the end of the animation queue.
            </summary>
            <param name="spriteComponent">The sprite component containing the animation</param>
            <param name="startIndex">The first index of the animation</param>
            <param name="endIndex">The last index of the animation</param>
            <param name="repeatMode">The value indicating how to loop the animation</param>
            <param name="framesPerSeconds">The animation speed in frames per second. 0 to use the sprite animation system default speed.</param>
        </member>
        <member name="M:Xenko.Rendering.Sprites.SpriteAnimationSystem.Queue(Xenko.Engine.SpriteComponent,System.Int32[],Xenko.Animations.AnimationRepeatMode,System.Single)">
            <summary>
            Queue the sprite animation defined by the provided sequence of indices at the end of the animation queue.
            </summary>
            <param name="spriteComponent">The sprite component containing the animation</param>
            <param name="indices">The sequence of indices defining the sprite animation</param>
            <param name="repeatMode">The value indicating how to loop the animation</param>
            <param name="framesPerSeconds">The animation speed in frames per second. 0 to use the sprite animation system default speed.</param>
        </member>
        <member name="M:Xenko.Rendering.Sprites.SpriteAnimationSystem.Pause(Xenko.Engine.SpriteComponent)">
            <summary>
            Pauses the animation of the provided sprite component.
            </summary>
            <param name="spriteComponent">the sprite component to pause</param>
        </member>
        <member name="M:Xenko.Rendering.Sprites.SpriteAnimationSystem.Resume(Xenko.Engine.SpriteComponent)">
            <summary>
            Resumes a previously paused animation.
            </summary>
            <param name="spriteComponent">the sprite component to resume</param>
        </member>
        <member name="M:Xenko.Rendering.Sprites.SpriteAnimationSystem.Stop(Xenko.Engine.SpriteComponent)">
            <summary>
            Stops the animation of the provided sprite component.
            </summary>
            <param name="spriteComponent">the sprite component to stop</param>
        </member>
        <member name="T:Xenko.Rendering.Sprites.SpriteRenderProcessor">
            <summary>
            The processor in charge of updating and drawing the entities having sprite components.
            </summary>
        </member>
        <member name="M:Xenko.Rendering.Sprites.SpriteRenderProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xenko.Rendering.Sprites.SpriteRenderProcessor"/> class.
            </summary>
        </member>
        <member name="T:Xenko.Shaders.Compiler.RemoteEffectCompiler">
            <summary>
            Compiles effect remotely on the developer host PC.
            </summary>
        </member>
        <member name="P:Xenko.Shaders.Compiler.RemoteEffectCompiler.FileProvider">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Shaders.Compiler.RemoteEffectCompiler.GetShaderSourceHash(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Shaders.Compiler.RemoteEffectCompiler.Compile(Xenko.Shaders.ShaderMixinSource,Xenko.Shaders.Compiler.EffectCompilerParameters,Xenko.Shaders.Compiler.CompilerParameters)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Shaders.Compiler.RemoteEffectCompilerClient">
            <summary>
            Used internally by <see cref="T:Xenko.Shaders.Compiler.RemoteEffectCompiler"/> to compile shaders remotely,
            and <see cref="!:Rendering.EffectSystem.CreateEffectCompiler"/> to record effect requested.
            </summary>
        </member>
        <member name="T:Xenko.Updater.ArrayUpdateResolver`1">
            <summary>
            Resolver for <see cref="!:T[]"/> in property path.
            </summary>
            <typeparam name="T">The type of array items.</typeparam>
        </member>
        <member name="T:Xenko.Updater.BlittableHelper">
            <summary>
            Various helpers for blittable types.
            </summary>
        </member>
        <member name="T:Xenko.Updater.CompiledUpdate">
            <summary>
            Defines an update compiled by <see cref="M:Xenko.Updater.UpdateEngine.Compile(System.Type,System.Collections.Generic.List{Xenko.Updater.UpdateMemberInfo})"/>
            for subsequent uses by <see cref="M:Xenko.Updater.UpdateEngine.Run(System.Object,Xenko.Updater.CompiledUpdate,System.IntPtr,Xenko.Updater.UpdateObjectData[])"/>.
            </summary>
        </member>
        <member name="F:Xenko.Updater.CompiledUpdate.UpdateOperations">
            <summary>
            Stores the list of update operations.
            </summary>
        </member>
        <member name="F:Xenko.Updater.CompiledUpdate.TemporaryObjects">
            <summary>
            Stores the list of pre-allocated objects for non-blittable struct unboxing.
            </summary>
        </member>
        <member name="T:Xenko.Updater.DataMemberUpdatableAttribute">
            <summary>
            Defines this member should be supported by <see cref="T:Xenko.Updater.UpdateEngine"/>
            even if <see cref="T:Xenko.Core.DataMemberIgnoreAttribute"/> is applied on it.
            </summary>
        </member>
        <member name="T:Xenko.Updater.EnterChecker">
            <summary>
            Provides a way to perform additional checks when entering an object (typically out of bounds checks).
            </summary>
        </member>
        <member name="M:Xenko.Updater.EnterChecker.CanEnter(System.Object)">
            <summary>
            Called by <see cref="M:Xenko.Updater.UpdateEngine.Run(System.Object,Xenko.Updater.CompiledUpdate,System.IntPtr,Xenko.Updater.UpdateObjectData[])"/> to perform additional checks when entering an object (typically out of bounds checks).
            </summary>
            <param name="obj">The object being entered.</param>
            <returns>True if checks succeed, false otherwise.</returns>
        </member>
        <member name="T:Xenko.Updater.ListEnterChecker`1">
            <summary>
            Implementation of <see cref="T:Xenko.Updater.EnterChecker"/> for <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:Xenko.Updater.ListEnterChecker`1.CanEnter(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Updater.ListUpdateResolver`1">
            <summary>
            Resolver for <see cref="T:System.Collections.Generic.IList`1"/> in property path.
            </summary>
            <typeparam name="T">The type of list items.</typeparam>
        </member>
        <member name="M:Xenko.Updater.ListUpdateResolver`1.ResolveIndexer(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Updater.UpdatableArrayAccessor`1">
            <summary>
            Defines how to get and set an array value for the <see cref="T:Xenko.Updater.UpdateEngine"/>.
            </summary>
        </member>
        <member name="M:Xenko.Updater.UpdatableArrayAccessor`1.CreateEnterChecker">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Updater.UpdatableCustomAccessor">
            <summary>
            Provide a custom implementation to access a member by the <see cref="T:Xenko.Updater.UpdateEngine"/>.
            </summary>
        </member>
        <member name="M:Xenko.Updater.UpdatableCustomAccessor.GetObject(System.IntPtr)">
            <summary>
            Gets a reference object from a property.
            </summary>
            <param name="obj">The object encoded as a native pointer (<see cref="T:Xenko.Updater.UpdateEngine"/> will make sure it is pinned).</param>
            <returns>The object value from the property.</returns>
        </member>
        <member name="M:Xenko.Updater.UpdatableCustomAccessor.SetObject(System.IntPtr,System.Object)">
            <summary>
            Sets a reference object from a property.
            </summary>
            <param name="obj">The object encoded as a native pointer (<see cref="T:Xenko.Updater.UpdateEngine"/> will make sure it is pinned).</param>
            <param name="data">The object value to set.</param>
        </member>
        <member name="M:Xenko.Updater.UpdatableCustomAccessor.GetSetOperationType">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Updater.UpdatableCustomAccessor.GetEnterOperationType">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Updater.UpdatableField">
            <summary>
            Defines how to set and get values from a field for the <see cref="T:Xenko.Updater.UpdateEngine"/>.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdatableField.Offset">
            <summary>
            Offset of this field in its containing object.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdatableField.Size">
            <summary>
            Size of this field.
            </summary>
        </member>
        <member name="M:Xenko.Updater.UpdatableField.SetStruct(System.IntPtr,System.Object)">
            <summary>
            Sets a non-blittable struct field (given in boxed form).
            </summary>
            <param name="obj">The container object.</param>
            <param name="data">The new value to unbox and set</param>
        </member>
        <member name="M:Xenko.Updater.UpdatableField.GetObject(System.IntPtr)">
            <summary>
            Gets a reference object from a field.
            </summary>
            <param name="obj">The object encoded as a native pointer (<see cref="T:Xenko.Updater.UpdateEngine"/> will make sure it is pinned).</param>
            <returns>The object value from the field.</returns>
        </member>
        <member name="M:Xenko.Updater.UpdatableField.SetObject(System.IntPtr,System.Object)">
            <summary>
            Sets a reference object from a field.
            </summary>
            <param name="obj">The object encoded as a native pointer (<see cref="T:Xenko.Updater.UpdateEngine"/> will make sure it is pinned).</param>
            <param name="data">The object value to set.</param>
        </member>
        <member name="M:Xenko.Updater.UpdatableField.SetBlittable(System.IntPtr,System.IntPtr)">
            <summary>
            Sets a blittable field (from its pointer).
            </summary>
            <param name="obj">The container object.</param>
            <param name="data">The struct data.</param>
        </member>
        <member name="M:Xenko.Updater.UpdatableField.GetSetOperationType">
            <summary>
            Internally used to know type of set operation to use.
            </summary>
        </member>
        <member name="T:Xenko.Updater.UpdatableField`1">
            <summary>
            Defines how to set and get values from a field of a given type for the <see cref="T:Xenko.Updater.UpdateEngine"/>.
            </summary>
        </member>
        <member name="P:Xenko.Updater.UpdatableField`1.MemberType">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Updater.UpdatableField`1.SetStruct(System.IntPtr,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Updater.UpdatableListAccessor">
            <summary>
            Base class for <see cref="T:Xenko.Updater.UpdatableListAccessor`1"/>.
            </summary>
        </member>
        <member name="T:Xenko.Updater.UpdatableListAccessor`1">
            <summary>
            Describes how to get or set a list value for the <see cref="T:Xenko.Updater.UpdateEngine"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Xenko.Updater.UpdatableListAccessor`1.MemberType">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Updater.UpdatableListAccessor`1.GetStructAndUnbox(System.IntPtr,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Updater.UpdatableListAccessor`1.GetBlittable(System.IntPtr,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Updater.UpdatableListAccessor`1.SetStruct(System.IntPtr,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Updater.UpdatableListAccessor`1.SetBlittable(System.IntPtr,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Updater.UpdatableListAccessor`1.GetObject(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Updater.UpdatableListAccessor`1.SetObject(System.IntPtr,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Updater.UpdatableListAccessor`1.CreateEnterChecker">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Updater.UpdatableMember">
            <summary>
            Describes how to access an object member so that it can be updated by the <see cref="T:Xenko.Updater.UpdateEngine"/>.
            </summary>
        </member>
        <member name="P:Xenko.Updater.UpdatableMember.MemberType">
            <summary>
            Gets the type of the member.
            </summary>
        </member>
        <member name="M:Xenko.Updater.UpdatableMember.CreateEnterChecker">
            <summary>
            Called by <see cref="M:Xenko.Updater.UpdateEngine.Compile(System.Type,System.Collections.Generic.List{Xenko.Updater.UpdateMemberInfo})"/> to generate additional checks when entering an object (typically out of bound checks).
            </summary>
            <returns>The created enter checker (or null if not needed).</returns>
        </member>
        <member name="T:Xenko.Updater.UpdatableProperty">
            <summary>
            Defines how to set and get values from a property for the <see cref="T:Xenko.Updater.UpdateEngine"/>.
            </summary>
        </member>
        <member name="M:Xenko.Updater.UpdatableProperty.GetObject(System.IntPtr)">
            <summary>
            Gets a reference object from a property.
            </summary>
            <param name="obj">The object encoded as a native pointer (<see cref="T:Xenko.Updater.UpdateEngine"/> will make sure it is pinned).</param>
            <returns>The object value from the property.</returns>
        </member>
        <member name="M:Xenko.Updater.UpdatableProperty.SetObject(System.IntPtr,System.Object)">
            <summary>
            Sets a reference object from a property.
            </summary>
            <param name="obj">The object encoded as a native pointer (<see cref="T:Xenko.Updater.UpdateEngine"/> will make sure it is pinned).</param>
            <param name="data">The object value to set.</param>
        </member>
        <member name="M:Xenko.Updater.UpdatableProperty.GetSetOperationType">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Updater.UpdatableProperty.GetEnterOperationType">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Updater.UpdatablePropertyBase">
            <summary>
            Shared class between <see cref="T:Xenko.Updater.UpdatableProperty"/> and <see cref="T:Xenko.Updater.UpdatableCustomAccessor"/>.
            </summary>
        </member>
        <member name="M:Xenko.Updater.UpdatablePropertyBase.GetBlittable(System.IntPtr,System.IntPtr)">
            <summary>
            Gets a blittable property (from its pointer).
            </summary>
            <param name="obj">The container object.</param>
            <param name="data">The struct data.</param>
        </member>
        <member name="M:Xenko.Updater.UpdatablePropertyBase.SetBlittable(System.IntPtr,System.IntPtr)">
            <summary>
            Sets a blittable property (from its pointer).
            </summary>
            <param name="obj">The container object.</param>
            <param name="data">The struct data.</param>
        </member>
        <member name="M:Xenko.Updater.UpdatablePropertyBase.SetStruct(System.IntPtr,System.Object)">
            <summary>
            Sets a non-blittable struct property (given in boxed form).
            </summary>
            <param name="obj">The container object.</param>
            <param name="data">The new value to unbox and set</param>
        </member>
        <member name="M:Xenko.Updater.UpdatablePropertyBase.GetStructAndUnbox(System.IntPtr,System.Object)">
            <summary>
            Gets and stores a non-blittable struct property into pre-allocated data, and return pointer to its start.
            </summary>
            <param name="obj">The container object.</param>
            <param name="data">The pre-allocated boxed struct.</param>
            <returns></returns>
        </member>
        <member name="M:Xenko.Updater.UpdatablePropertyBase.GetSetOperationType">
            <summary>
            Internally used to know type of set operation to use.
            </summary>
        </member>
        <member name="M:Xenko.Updater.UpdatablePropertyBase.GetEnterOperationType">
            <summary>
            Internally used to know type of enter operation to use.
            </summary>
        </member>
        <member name="T:Xenko.Updater.UpdatablePropertyObject`1">
            <summary>
            Defines how to set and get values from a property of a given reference type for the <see cref="T:Xenko.Updater.UpdateEngine"/>.
            </summary>
            <typeparam name="T">The property type.</typeparam>
        </member>
        <member name="P:Xenko.Updater.UpdatablePropertyObject`1.MemberType">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Updater.UpdatablePropertyObject`1.GetBlittable(System.IntPtr,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Updater.UpdatablePropertyObject`1.SetBlittable(System.IntPtr,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Updater.UpdatablePropertyObject`1.SetStruct(System.IntPtr,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Updater.UpdatablePropertyObject`1.GetStructAndUnbox(System.IntPtr,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Updater.UpdatableProperty`1">
            <summary>
            Defines how to set and get values from a property of a given value type for the <see cref="T:Xenko.Updater.UpdateEngine"/>.
            </summary>
            <typeparam name="T">The property type.</typeparam>
        </member>
        <member name="P:Xenko.Updater.UpdatableProperty`1.MemberType">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Updater.UpdatableProperty`1.GetStructAndUnbox(System.IntPtr,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Updater.UpdatableProperty`1.GetBlittable(System.IntPtr,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Updater.UpdatableProperty`1.SetStruct(System.IntPtr,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xenko.Updater.UpdatableProperty`1.SetBlittable(System.IntPtr,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="T:Xenko.Updater.UpdateEngine">
            <summary>
            Efficiently updates values on objects using property paths.
            </summary>
        </member>
        <member name="M:Xenko.Updater.UpdateEngine.RegisterMember(System.Type,System.String,Xenko.Updater.UpdatableMember)">
            <summary>
            Registers a new member for a given type and name.
            </summary>
            <param name="owner">The owner type.</param>
            <param name="name">The member name.</param>
            <param name="updatableMember">The member update class to get and set value.</param>
        </member>
        <member name="T:Xenko.Updater.UpdateEngine.AnimationBuilderStackEntry">
            <summary>
            An entry on the stack of <see cref="M:Xenko.Updater.UpdateEngine.Compile(System.Type,System.Collections.Generic.List{Xenko.Updater.UpdateMemberInfo})"/>.
            </summary>
        </member>
        <member name="T:Xenko.Updater.UpdateEngine.ComputeUpdateOperationState">
            <summary>
            Encode state of <see cref="M:Xenko.Updater.UpdateEngine.Compile(System.Type,System.Collections.Generic.List{Xenko.Updater.UpdateMemberInfo})"/> so that it can be easily passed
            to another function (easier to split it in multiple methods).
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateEngine.ComputeUpdateOperationState.UpdateOperations">
            <summary>
            Current list of update operations being built.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateEngine.ComputeUpdateOperationState.StackPath">
            <summary>
            Stack of the current path.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateEngine.ComputeUpdateOperationState.ParseElementStart">
            <summary>
            Current path start index in the string.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateEngine.ComputeUpdateOperationState.ParseElementEnd">
            <summary>
            Current path end index in the string.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateEngine.ComputeUpdateOperationState.LastChildMember">
            <summary>
            Contains the last node that was just left.
            Used to call <see cref="M:Xenko.Updater.UpdatableMember.CreateEnterChecker"/>.
            </summary>
        </member>
        <member name="M:Xenko.Updater.UpdateEngine.Compile(System.Type,System.Collections.Generic.List{Xenko.Updater.UpdateMemberInfo})">
            <summary>
            Compiles a list of update operations into a <see cref="T:Xenko.Updater.CompiledUpdate"/>, for use with <see cref="M:Xenko.Updater.UpdateEngine.Run(System.Object,Xenko.Updater.CompiledUpdate,System.IntPtr,Xenko.Updater.UpdateObjectData[])"/>.
            </summary>
            <param name="rootObjectType">The type of the root object.</param>
            <param name="animationPaths">The different paths and source offsets to use when <see cref="M:Xenko.Updater.UpdateEngine.Run(System.Object,Xenko.Updater.CompiledUpdate,System.IntPtr,Xenko.Updater.UpdateObjectData[])"/> is applied.</param>
            <returns>A <see cref="T:Xenko.Updater.CompiledUpdate"/> object that can be used for <see cref="M:Xenko.Updater.UpdateEngine.Run(System.Object,Xenko.Updater.CompiledUpdate,System.IntPtr,Xenko.Updater.UpdateObjectData[])"/>.</returns>
        </member>
        <member name="M:Xenko.Updater.UpdateEngine.Run(System.Object,Xenko.Updater.CompiledUpdate,System.IntPtr,Xenko.Updater.UpdateObjectData[])">
            <summary>
            Updates the specified <see cref="!:target"/> object with new data.
            </summary>
            <param name="target">The object to update.</param>
            <param name="compiledUpdate">The precompiled list of update operations, generated by <see cref="M:Xenko.Updater.UpdateEngine.Compile(System.Type,System.Collections.Generic.List{Xenko.Updater.UpdateMemberInfo})"/>.</param>
            <param name="updateData">The data source for blittable struct.</param>
            <param name="updateObjects">The data source for objects and non-blittable struct</param>
        </member>
        <member name="T:Xenko.Updater.UpdateEngine.UpdateKey">
            <summary>
            Internally used as key to register members.
            </summary>
        </member>
        <member name="T:Xenko.Updater.UpdateEngine.UpdateStackEntry">
            <summary>
            Stack entry used in <see cref="M:Xenko.Updater.UpdateEngine.Run(System.Object,Xenko.Updater.CompiledUpdate,System.IntPtr,Xenko.Updater.UpdateObjectData[])"/>.
            </summary>
        </member>
        <member name="T:Xenko.Updater.UpdateEngineHelper">
            <summary>
            Various helper functions for the <see cref="T:Xenko.Updater.UpdateEngine"/>.
            </summary>
        </member>
        <member name="T:Xenko.Updater.UpdateMemberInfo">
            <summary>
            Defines a member to update for <see cref="M:Xenko.Updater.UpdateEngine.Compile(System.Type,System.Collections.Generic.List{Xenko.Updater.UpdateMemberInfo})"/>.
            </summary>
        </member>
        <member name="M:Xenko.Updater.UpdateMemberInfo.#ctor(System.String,System.Int32)">
            <summary>
            Create a member update entry for <see cref="M:Xenko.Updater.UpdateEngine.Compile(System.Type,System.Collections.Generic.List{Xenko.Updater.UpdateMemberInfo})"/>.
            </summary>
            <param name="name">The member path to update.</param>
            <param name="dataOffset">The offset of this member source as it will be given to <see cref="M:Xenko.Updater.UpdateEngine.Run(System.Object,Xenko.Updater.CompiledUpdate,System.IntPtr,Xenko.Updater.UpdateObjectData[])"/> (either byte offset if blittable, otherwise object index).</param>
        </member>
        <member name="T:Xenko.Updater.UpdateMemberResolver">
            <summary>
            Describes how to parse and resolve an <see cref="T:Xenko.Updater.UpdatableMember"/>
            when parsing an <see cref="T:Xenko.Updater.UpdateEngine"/> property path.
            </summary>
        </member>
        <member name="P:Xenko.Updater.UpdateMemberResolver.SupportedType">
            <summary>
            Defines what type it does support.
            </summary>
        </member>
        <member name="M:Xenko.Updater.UpdateMemberResolver.ResolveProperty(System.String)">
            <summary>
            Defines how to resolve a member (after a dot).
            </summary>
            <param name="memberName">The member name to resolve.</param>
            <returns>The resolved member if found, otherwise null.</returns>
        </member>
        <member name="M:Xenko.Updater.UpdateMemberResolver.ResolveIndexer(System.String)">
            <summary>
            Defines how to resolve an indexer (between angle brackets).
            </summary>
            <param name="indexerName">The indexer name to resolve.</param>
            <returns>The resolved indexer if found, otherwise null.</returns>
        </member>
        <member name="T:Xenko.Updater.UpdateObjectData">
            <summary>
            Defines an conditional entry for the object to update.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateObjectData.Condition">
            <summary>
            Condition for update; if non 0, this object will be updated, otherwise not.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateObjectData.Value">
            <summary>
            Object value.
            </summary>
        </member>
        <member name="T:Xenko.Updater.UpdateOperation">
            <summary>
            Defines an update operation for internal use by <see cref="T:Xenko.Updater.UpdateEngine"/>.
            </summary>
        </member>
        <member name="T:Xenko.Updater.UpdateOperationType">
            <summary>
            Defines the type of <see cref="T:Xenko.Updater.UpdateOperation"/>.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateOperationType.Invalid">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateOperationType.EnterObjectProperty">
            <summary>
            Push current state on stack and enter in a reference property. New offset will be beginning of the object.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateOperationType.EnterStructPropertyBase">
            <summary>
            Push current state on stack and enter in a value type property.
            Object will be copied in a preallocated boxed object so that property setter can be called with updated value when done.
            New offset will be beginning of unboxed struct.
            Non blittable types are allowed.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateOperationType.EnterObjectField">
            <summary>
            Push current state on stack and enter in a reference field. New offset will be beginning of the object.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateOperationType.EnterObjectCustom">
            <summary>
            Push current state on stack and enter in a reference property. New offset will be beginning of the object.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateOperationType.Leave">
            <summary>
            Pop current state.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateOperationType.LeaveAndCopyStructPropertyBase">
            <summary>
            Pop current state and set back property into its parent container.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateOperationType.ConditionalSetObjectProperty">
            <summary>
            Set a reference property.
            Offset should be the beginning of object containing this property.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateOperationType.ConditionalSetBlittablePropertyBase">
            <summary>
            Set a blittable struct property.
            Offset should be the beginning of object containing this property.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateOperationType.ConditionalSetStructPropertyBase">
            <summary>
            Set a struct property.
            Offset should be the beginning of object containing this property.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateOperationType.ConditionalSetObjectField">
            <summary>
            Set an object field using AnimOperation.Object at the current offset.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateOperationType.ConditionalSetBlittableField">
            <summary>
            Set a blittable struct field using AnimOperation.Data at the current offset.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateOperationType.ConditionalSetBlittableField4">
            <summary>
            Set a blittable struct field using AnimOperation.Data at the current offset. Optimized version for 4 bytes struct.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateOperationType.ConditionalSetBlittableField8">
            <summary>
            Set a blittable struct field using AnimOperation.Data at the current offset. Optimized version for 8 bytes struct.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateOperationType.ConditionalSetBlittableField12">
            <summary>
            Set a blittable struct field using AnimOperation.Data at the current offset. Optimized version for 12 bytes struct.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateOperationType.ConditionalSetBlittableField16">
            <summary>
            Set a blittable struct field using AnimOperation.Data at the current offset. Optimized version for 16 bytes struct.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateOperationType.ConditionalSetStructField">
            <summary>
            Set a struct field using AnimOperation.Object (boxed) at the current offset.
            </summary>
        </member>
        <member name="F:Xenko.Updater.UpdateOperationType.ConditionalSetObjectCustom">
            <summary>
            Set an object using AnimOperation.Object at the current offset.
            </summary>
        </member>
        <member name="T:Xenko.Internal.Refactor">
            <summary>
            Set of methods to help in refactoring that can be easily tracked by finding usages.
            </summary>
        </member>
        <member name="M:Xenko.Internal.Refactor.ThrowNotImplementedException(System.String)">
            <summary>
            Throw a not implemented exception. Useful to avoid warnings about non-reachable code.
            </summary>
            <param name="message">Reason for the exception.</param>
        </member>
        <member name="M:Xenko.Internal.Refactor.NewNotImplementedException(System.String)">
            <summary>
            Create a new not implemented exception. Useful when we need to tell the C# compiler code
            won't be reached after.
            </summary>
            <param name="message">Reason for the exception.</param>
        </member>
        <member name="T:Xenko.XenkoVersion">
            <summary>
            Internal version used to identify Xenko version.
            </summary>
            <remarks>
            During package build, PackageUpdateVersionTask is updating that file and expect some specific text regex so be careful if you change any of this.
            </remarks>
        </member>
        <member name="F:Xenko.XenkoVersion.PublicVersion">
            <summary>
            The version used by editor for display purpose. 4th digit needs to be at least 1 if used (due to NuGet special cases).
            </summary>
        </member>
        <member name="F:Xenko.XenkoVersion.AssemblyVersion">
            <summary>
            The current assembly version as text, currently same as <see cref="F:Xenko.XenkoVersion.PublicVersion"/>.
            </summary>
        </member>
        <member name="F:Xenko.XenkoVersion.NuGetVersionSimple">
            <summary>
            The NuGet package version without special tags.
            </summary>
        </member>
        <member name="F:Xenko.XenkoVersion.NuGetVersion">
            <summary>
            The NuGet package version.
            </summary>
        </member>
        <member name="F:Xenko.XenkoVersion.NuGetVersionSuffix">
            <summary>
            The NuGet package suffix (i.e. -beta01). Automatically set by Xenko.GitVersioning.GenerateVersionFile.
            Three possible values:
            - Empty: official release
            - -betaXX: development version (XX should corespond to development asset versioning)
            - -betaXX-YYYY: beta release (YYYY is the git height since current version has been bumped)
            </summary>
        </member>
        <member name="F:Xenko.XenkoVersion.BuildMetadata">
            <summary>
            The build metadata, usually +g[git_hash] during package. Automatically set by Xenko.GitVersioning.GenerateVersionFile.
            </summary>
        </member>
        <member name="F:Xenko.XenkoVersion.AssemblyInformationalVersion">
            <summary>
            The informational assembly version, containing -beta01 or +g[git_hash] during package.
            </summary>
        </member>
        <member name="T:Xenko.PublicKeys">
            <summary>
            Assembly signing information.
            </summary>
        </member>
        <member name="F:Xenko.PublicKeys.Default">
            <summary>
            Assembly name suffix that contains signing information.
            </summary>
        </member>
        <member name="T:Sockets.Plugin.CommsInterface">
            <summary>
            Provides a summary of an available network interface on the device.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.CommsInterface.NativeInterfaceId">
            <summary>
            The interface identifier provided by the underlying platform.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.CommsInterface.Name">
            <summary>
            The interface name, as provided by the underlying platform.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.CommsInterface.IpAddress">
            <summary>
            The IPv4 Address of the interface, if connected. 
            </summary>
        </member>
        <member name="P:Sockets.Plugin.CommsInterface.GatewayAddress">
            <summary>
            The IPv4 address of the gateway, if available.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.CommsInterface.BroadcastAddress">
            <summary>
            The IPv4 broadcast address for the interface, if available.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.CommsInterface.ConnectionStatus">
            <summary>
            The connection status of the interface, if available
            </summary>
        </member>
        <member name="P:Sockets.Plugin.CommsInterface.IsUsable">
            <summary>
            Indicates whether the interface has a network address and can be used for 
            sending/receiving data.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.CommsInterface.IsLoopback">
            <summary>
            Indicates whether the interface is the loopback interface
            </summary>
        </member>
        <member name="F:Sockets.Plugin.CommsInterface.NativeInterface">
            <summary>
            The native NetworkInterface this CommsInterface represents.
            </summary>
        </member>
        <member name="F:Sockets.Plugin.CommsInterface.NativeIpAddress">
            <summary>
            The Native IpAddress this CommsInterface represents.
            </summary>
        </member>
        <member name="M:Sockets.Plugin.CommsInterface.EndPoint(System.Int32)">
            <summary>
            Returns an IPEndpoint object that can be used to bind the network interface to specified port. 
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Sockets.Plugin.CommsInterface.GetAllInterfacesAsync">
            <summary>
            Retrieves information on the IPv4 network interfaces available.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sockets.Plugin.CommsInterface.GetSubnetMask(System.Net.NetworkInformation.UnicastIPAddressInformation)">
            <summary>
            UnicastIPAddressInformation.IPv4Mask is not implemented in Xamarin. This method sits in a partial class definition
            on each native platform and retrieves the netmask in whatever way it can be done for each platform. 
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="T:Sockets.Plugin.NetworkExtensions">
            <summary>
            Helper methods required for the conversion of platform-specific network items to the abstracted versions. 
            </summary>
        </member>
        <member name="M:Sockets.Plugin.NetworkExtensions.ToCommsInterfaceSummary(System.Net.NetworkInformation.NetworkInterface)">
            <summary>
            Returns a <code>CommsInterface</code> wrapper from a platform native <code>NetworkInterface</code>. 
            </summary>
            <param name="nativeInterface"></param>
            <returns></returns>
        </member>
        <member name="M:Sockets.Plugin.NetworkExtensions.ToCommsInterfaceStatus(System.Net.NetworkInformation.OperationalStatus)">
            <summary>
            Converts an <code>OperationalStatus</code> value to the abstracted <code>CommsInterfaceStatus</code>. 
            </summary>
            <param name="nativeStatus"></param>
            <returns></returns>
        </member>
        <member name="M:Sockets.Plugin.NetworkExtensions.GetBroadcastAddress(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Determines the broadcast address for a given IPAddress
            Adapted from http://blogs.msdn.com/b/knom/archive/2008/12/31/ip-address-calculations-with-c-subnetmasks-networks.aspx
            </summary>
            <param name="address"></param>
            <param name="subnetMask"></param>
            <returns></returns>
        </member>
        <member name="T:Sockets.Plugin.TcpSocketClient">
            <summary>
                Sends and receives data over a TCP socket. Establish a connection with a listening TCP socket using
                <code>ConnectAsync</code>.
                Use the <code>WriteStream</code> and <code>ReadStream</code> properties for sending and receiving data
                respectively.
            </summary>
        </member>
        <member name="M:Sockets.Plugin.TcpSocketClient.#ctor">
            <summary>
                Default constructor for <code>TcpSocketClient</code>.
            </summary>
        </member>
        <member name="M:Sockets.Plugin.TcpSocketClient.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sockets.Plugin.TcpSocketClient"/> class.
            </summary>
            <param name="bufferSize">Size of the buffer for the write stream.</param>
        </member>
        <member name="M:Sockets.Plugin.TcpSocketClient.ConnectAsync(System.String,System.Int32,System.Boolean)">
            <summary>
                Establishes a TCP connection with the endpoint at the specified address/port pair.
            </summary>
            <param name="address">The address of the endpoint to connect to.</param>
            <param name="port">The port of the endpoint to connect to.</param>
            <param name="secure">True to enable TLS on the socket.</param>
        </member>
        <member name="M:Sockets.Plugin.TcpSocketClient.DisconnectAsync">
            <summary>
                Disconnects from an endpoint previously connected to using <code>ConnectAsync</code>.
                Should not be called on a <code>TcpSocketClient</code> that is not already connected.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.TcpSocketClient.ReadStream">
            <summary>
                A stream that can be used for receiving data from the remote endpoint.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.TcpSocketClient.WriteStream">
            <summary>
                A stream that can be used for sending data to the remote endpoint.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.TcpSocketClient.RemoteAddress">
            <summary>
                The address of the remote endpoint to which the <code>TcpSocketClient</code> is currently connected.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.TcpSocketClient.RemotePort">
            <summary>
                The port of the remote endpoint to which the <code>TcpSocketClient</code> is currently connected.
            </summary>
        </member>
        <member name="M:Sockets.Plugin.TcpSocketClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Sockets.Plugin.TcpSocketClient.Finalize">
            <summary>
            Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:Sockets.Plugin.TcpSocketListener">
            <summary>
                Binds to a port and listens for TCP connections.
                Use <code>StartListeningAsync</code> to bind to a local port, then handle <code>ConnectionReceived</code> events as
                clients connect.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.TcpSocketListener.ConnectionReceived">
            <summary>
                Fired when a new TCP connection has been received.
                Use the <code>SocketClient</code> property of the <code>TcpSocketListenerConnectEventArgs</code>
                to get a <code>TcpSocketClient</code> representing the connection for sending and receiving data.
            </summary>
        </member>
        <member name="M:Sockets.Plugin.TcpSocketListener.StartListeningAsync(System.Int32,Sockets.Plugin.Abstractions.ICommsInterface,System.Boolean)">
            <summary>
                Binds the <code>TcpSocketListener</code> to the specified port on all endpoints and listens for TCP connections.
            </summary>
            <param name="port">The port to listen on.</param>
            <param name="listenOn">The <code>CommsInterface</code> to listen on. If unspecified, all interfaces will be bound.</param>
            <param name="inheritHandle">Allows handle inheritance. Might be ignored depending on platform.</param>
            <returns></returns>
        </member>
        <member name="M:Sockets.Plugin.TcpSocketListener.StopListeningAsync">
            <summary>
                Stops the <code>TcpSocketListener</code> from listening for new TCP connections.
                This does not disconnect existing connections.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.TcpSocketListener.LocalPort">
            <summary>
                The port to which the TcpSocketListener is currently bound
            </summary>
        </member>
        <member name="M:Sockets.Plugin.TcpSocketListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Sockets.Plugin.TcpSocketListener.Finalize">
            <summary>
            Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:Sockets.Plugin.Abstractions.CommsInterfaceStatus">
            <summary>
            The connection state of an interface.
            </summary>
        </member>
        <member name="F:Sockets.Plugin.Abstractions.CommsInterfaceStatus.Unknown">
            <summary>
            The state of the interface can not be determined.
            </summary>
        </member>
        <member name="F:Sockets.Plugin.Abstractions.CommsInterfaceStatus.Connected">
            <summary>
            The interface is connected. 
            </summary>
        </member>
        <member name="F:Sockets.Plugin.Abstractions.CommsInterfaceStatus.Disconnected">
            <summary>
            The interface is disconnected.
            </summary>
        </member>
        <member name="T:Sockets.Plugin.Abstractions.TcpSocketListenerConnectEventArgs">
            <summary>
                Fired when a TcpSocketListener receives a new connection.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.TcpSocketListenerConnectEventArgs.SocketClient">
            <summary>
                A <code>TcpSocketClient</code> representing the newly connected client.
            </summary>
        </member>
        <member name="M:Sockets.Plugin.Abstractions.TcpSocketListenerConnectEventArgs.#ctor(Sockets.Plugin.Abstractions.ITcpSocketClient)">
            <summary>
                Constructor for <code>TcpSocketListenerConnectEventArgs.</code>
            </summary>
            <param name="socketClient">A <code>TcpSocketClient</code> representing the newly connected client.</param>
        </member>
        <member name="T:Sockets.Plugin.Abstractions.ICommsInterface">
            <summary>
            Provides a summary of an available network interface on the device.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ICommsInterface.NativeInterfaceId">
            <summary>
            The interface identifier provided by the underlying platform.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ICommsInterface.Name">
            <summary>
            The interface name, as provided by the underlying platform.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ICommsInterface.IpAddress">
            <summary>
            The IPv4 Address of the interface, if connected. 
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ICommsInterface.GatewayAddress">
            <summary>
            The IPv4 address of the gateway, if available.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ICommsInterface.BroadcastAddress">
            <summary>
            The IPv4 broadcast address for the interface, if available.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ICommsInterface.ConnectionStatus">
            <summary>
            The connection status of the interface, if available
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ICommsInterface.IsUsable">
            <summary>
            Indicates whether the interface has a network address and can be used for 
            sending/receiving data.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ICommsInterface.IsLoopback">
            <summary>
            Indicates whether the interface is the loopback interface
            </summary>
        </member>
        <member name="T:Sockets.Plugin.Abstractions.ITcpSocketClient">
            <summary>
                Sends and receives data over a TCP socket. Establish a connection with a listening TCP socket using
                <code>ConnectAsync</code>.
                Use the <code>WriteStream</code> and <code>ReadStream</code> properties for sending and receiving data
                respectively.
            </summary>
        </member>
        <member name="M:Sockets.Plugin.Abstractions.ITcpSocketClient.ConnectAsync(System.String,System.Int32,System.Boolean)">
            <summary>
                Establishes a TCP connection with the endpoint at the specified address/port pair.
            </summary>
            <param name="address">The address of the endpoint to connect to.</param>
            <param name="port">The port of the endpoint to connect to.</param>
            <param name="secure">Is this socket secure?</param>
        </member>
        <member name="M:Sockets.Plugin.Abstractions.ITcpSocketClient.DisconnectAsync">
            <summary>
                Disconnects from an endpoint previously connected to using <code>ConnectAsync</code>.
                Should not be called on a <code>TcpSocketClient</code> that is not already connected.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ITcpSocketClient.ReadStream">
            <summary>
                A stream that can be used for receiving data from the remote endpoint.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ITcpSocketClient.WriteStream">
            <summary>
                A stream that can be used for sending data to the remote endpoint.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ITcpSocketClient.RemoteAddress">
            <summary>
                The address of the remote endpoint to which the <code>TcpSocketClient</code> is currently connected.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ITcpSocketClient.RemotePort">
            <summary>
                The port of the remote endpoint to which the <code>TcpSocketClient</code> is currently connected.
            </summary>
        </member>
        <member name="T:Sockets.Plugin.Abstractions.ITcpSocketListener">
            <summary>
                Binds to a port and listens for TCP connections.
                Use <code>StartListeningAsync</code> to bind to a local port, then handle <code>ConnectionReceived</code> events as
                clients connect.
            </summary>
        </member>
        <member name="M:Sockets.Plugin.Abstractions.ITcpSocketListener.StartListeningAsync(System.Int32,Sockets.Plugin.Abstractions.ICommsInterface,System.Boolean)">
            <summary>
                Binds the <code>TcpSocketListener</code> to the specified port on all endpoints and listens for TCP connections.
            </summary>
            <param name="port">The port to listen on.</param>
            <param name="listenOn">The <code>CommsInterface</code> to listen on. If unspecified, all interfaces will be bound.</param>
            <param name="inheritHandle">Allows handle inheritance. Might be ignored depending on platform.</param>
            <returns></returns>
        </member>
        <member name="M:Sockets.Plugin.Abstractions.ITcpSocketListener.StopListeningAsync">
            <summary>
                Stops the <code>TcpSocketListener</code> from listening for new TCP connections.
                This does not disconnect existing connections.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ITcpSocketListener.LocalPort">
            <summary>
                The port to which the TcpSocketListener is currently bound
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ITcpSocketListener.ConnectionReceived">
            <summary>
                Fired when a new TCP connection has been received.
                Use the <code>SocketClient</code> property of the <code>TcpSocketListenerConnectEventArgs</code>
                to get a <code>TcpSocketClient</code> representing the connection for sending and receiving data.
            </summary>
        </member>
    </members>
</doc>
